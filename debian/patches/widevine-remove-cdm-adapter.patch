From d5b69c8251c1710472d4850cf389b18a868bc6cc Mon Sep 17 00:00:00 2001
From: Xiaohan Wang <xhwang@chromium.org>
Date: Tue, 20 Mar 2018 22:18:35 +0000
Subject: [PATCH] media: Remove widevinecdmadapter target

Pepper CDM is being deprecated so widevinecdmadapter should not be
needed anywhere now. Targets that need Widevine CDM should depend
on "widevinecdm" target directly.

Details of change:
- Remove widevinecdmadapter from third_party/widevine/cdm/BUILD.gn
- Remove files required to build widevinecdmadapter
- Remove stub CDM since it's only needed to build the CDM adapter
- Update installer code to remove widevinecdmadapter

Bug: 772160
Change-Id: I5c17d3d34a98839ecb48438cd09aaa8a565dd5dd
Reviewed-on: https://chromium-review.googlesource.com/957868
Commit-Queue: Xiaohan Wang <xhwang@chromium.org>
Reviewed-by: John Rummell <jrummell@chromium.org>
Reviewed-by: Prasad Vuppalapu <prasadv@chromium.org>
Reviewed-by: Lei Zhang <thestig@chromium.org>
Reviewed-by: Robert Sesek <rsesek@chromium.org>
Cr-Commit-Position: refs/heads/master@{#544557}
---

Index: dev/chrome/BUILD.gn
===================================================================
--- dev.orig/chrome/BUILD.gn
+++ dev/chrome/BUILD.gn
@@ -309,7 +309,7 @@ if (!is_android && !is_mac) {
 
       data_deps += [
         "//chrome/browser/resources/media/mei_preload:component",
-        "//third_party/widevine/cdm:widevinecdmadapter",
+        "//third_party/widevine/cdm",
       ]
 
       if (is_multi_dll_chrome) {
@@ -760,9 +760,7 @@ if (is_win) {
       ":verify_chrome_framework_order",
     ]
 
-    # Only official builds that include Widevine need the widevine
-    # signature file.
-    if (is_chrome_branded && enable_library_cdms) {
+    if (enable_widevine_cdm_host_verification) {
       sources += [ "$root_out_dir/Widevine Resources.bundle" ]
       public_deps += [ ":widevine_resources_bundle" ]
     }
@@ -1003,52 +1001,20 @@ if (is_win) {
     }
   }
 
-  _should_bundle_widevine =
-      (is_chrome_branded || enable_widevine) && enable_library_cdms
-  if (_should_bundle_widevine) {
-    # The Widevine CDM and manifest are either the actual Widevine CDM and
-    # manifest or stubs used for testing only. The choice is made within the
-    # corresponding Widevine targets based on branding.
+  if (should_bundle_widevine_cdm) {
     bundle_data("widevine_cdm_library_binaries") {
       sources = [
-        "$root_out_dir/$widevine_cdm_path/widevinecdmadapter.plugin",
-        "$root_out_dir/libwidevinecdm.dylib",
-      ]
-      outputs = [
-        "{{bundle_contents_dir}}/Libraries/$widevine_cdm_path/{{source_file_part}}",
-      ]
-      public_deps = [
-        # Need this intermediate dependency because "widevinecdm" is a
-        # shared_library if !is_chrome_branded, and then depending on
-        # "widevinecdm" directly would cause it to be linked into the Chromium
-        # Framework, which we don't want.
-        ":widevine_cdm_library_copy",
-        "//third_party/widevine/cdm:widevinecdmadapter",
-      ]
-
-      # Signatures are only generated for official chrome.
-      if (is_chrome_branded) {
-        sources += [
-          "$root_out_dir/$widevine_cdm_path/widevinecdmadapter.plugin.sig",
-          "$root_out_dir/libwidevinecdm.dylib.sig",
-        ]
-        public_deps += [ ":sign_cdm_adapter_for_widevine" ]
-      }
-    }
-
-    copy("widevine_cdm_library_copy") {
-      sources = [
         "$root_out_dir/$widevine_cdm_path/libwidevinecdm.dylib",
       ]
-      if (is_chrome_branded) {
+      if (enable_widevine_cdm_host_verification) {
         sources +=
             [ "$root_out_dir/$widevine_cdm_path/libwidevinecdm.dylib.sig" ]
       }
       outputs = [
-        "$root_out_dir/{{source_file_part}}",
+        "{{bundle_contents_dir}}/Libraries/$widevine_cdm_path/{{source_file_part}}",
       ]
-      deps = [
-        "//third_party/widevine/cdm:widevinecdm",
+      public_deps = [
+        "//third_party/widevine/cdm",
       ]
     }
 
@@ -1060,18 +1026,21 @@ if (is_win) {
         "{{bundle_contents_dir}}/Libraries/WidevineCdm/{{source_file_part}}",
       ]
       public_deps = [
-        "//third_party/widevine/cdm:widevine_cdm_manifest",
+        "//third_party/widevine/cdm",
       ]
     }
+  }
 
-    widevine_sign_file("sign_cdm_adapter_for_widevine") {
-      file = "$root_out_dir/$widevine_cdm_path/widevinecdmadapter.plugin"
-      flags = 0
+  group("widevine_cdm_library") {
+    if (should_bundle_widevine_cdm) {
       deps = [
-        "//third_party/widevine/cdm:widevinecdmadapter",
+        ":widevine_cdm_library_binaries",
+        ":widevine_cdm_library_manifest",
       ]
     }
+  }
 
+  if (enable_widevine_cdm_host_verification) {
     widevine_sign_file("sign_chrome_framework_for_widevine") {
       file = "$root_out_dir/$chrome_framework_name.framework/"
       if (defined(chrome_framework_version)) {
@@ -1130,15 +1099,6 @@ if (is_win) {
       ]
     }
   }
-
-  group("widevine_cdm_library") {
-    if (_should_bundle_widevine) {
-      deps = [
-        ":widevine_cdm_library_binaries",
-        ":widevine_cdm_library_manifest",
-      ]
-    }
-  }
 
   if (is_chrome_branded) {
     action("keystone_registration_framework") {
Index: dev/chrome/installer/linux/BUILD.gn
===================================================================
--- dev.orig/chrome/installer/linux/BUILD.gn
+++ dev/chrome/installer/linux/BUILD.gn
@@ -49,10 +49,8 @@ if (enable_nacl) {
 
 # The widevine BUILD.gn only produces shared libraries for x86 and x64
 if (is_chrome_branded && (current_cpu == "x86" || current_cpu == "x64")) {
-  packaging_files_shlibs += [
-    "$root_out_dir/$widevine_cdm_path/libwidevinecdmadapter.so",
-    "$root_out_dir/$widevine_cdm_path/libwidevinecdm.so",
-  ]
+  packaging_files_shlibs +=
+      [ "$root_out_dir/$widevine_cdm_path/libwidevinecdm.so" ]
 }
 
 if (!libcpp_is_static && use_custom_libcxx) {
@@ -370,10 +368,7 @@ group("installer_deps") {
     ]
   }
   if (current_cpu == "x86" || current_cpu == "x64") {
-    public_deps += [
-      "//third_party/widevine/cdm:widevinecdm",
-      "//third_party/widevine/cdm:widevinecdmadapter",
-    ]
+    public_deps += [ "//third_party/widevine/cdm" ]
   }
   if (!is_chromeos) {
     public_deps += [ ":rpm_packaging_files" ]
Index: dev/chrome/installer/linux/common/installer.include
===================================================================
--- dev.orig/chrome/installer/linux/common/installer.include
+++ dev/chrome/installer/linux/common/installer.include
@@ -194,8 +194,7 @@ stage_install_common() {
   fi
 
   # Widevine CDM.
-  if [ -f "${BUILDDIR}/libwidevinecdmadapter.so" ]; then
-    install -m ${SHLIB_PERMS} -s "${BUILDDIR}/libwidevinecdmadapter.so" "${STAGEDIR}/${INSTALLDIR}/"
+  if [ -f "${BUILDDIR}/libwidevinecdm.so" ]; then
     # No need to strip; libwidevinecdm.so starts out stripped.
     install -m ${SHLIB_PERMS} "${BUILDDIR}/libwidevinecdm.so" "${STAGEDIR}/${INSTALLDIR}/"
   fi
Index: dev/chrome/installer/mac/sign_versioned_dir.sh.in
===================================================================
--- dev.orig/chrome/installer/mac/sign_versioned_dir.sh.in
+++ dev/chrome/installer/mac/sign_versioned_dir.sh.in
@@ -91,7 +91,6 @@ crashpad_handler="${framework}/Helpers/c
 helper_app="${versioned_dir}/@MAC_PRODUCT_NAME@ Helper.app"
 app_mode_loader_app="${framework}/Resources/app_mode_loader.app"
 app_mode_loader="${app_mode_loader_app}/Contents/MacOS/app_mode_loader"
-widevine_plugin="${framework}/Libraries/WidevineCdm/_platform_specific/mac_x64/widevinecdmadapter.plugin"
 
 codesign_with_options "${crashpad_handler}" \
                       "${enforcement_flags_helpers}" \
@@ -120,12 +119,6 @@ codesign_with_options "${notification_se
                       "${enforcement_flags_helpers}" \
                       "${xpc_bundle_id}"
 
-# Only sign widevine plugin if it is present in the bundle.
-# ${enforcement_flags*} are meaningless for dynamic libraries.
-if [[ -f "${widevine_plugin}" ]]; then
-  codesign_with_options "${widevine_plugin}" "" "widevinecdmadapter"
-fi
-
 # The framework is a dylib, so ${enforcement_flags_helpers} are meaningless.
 codesign_with_options "${framework}" "" "com.google.Chrome.framework"
 
@@ -133,10 +126,6 @@ codesign_with_options "${helper_app}" \
                       "${enforcement_flags_app}" \
                       "com.google.Chrome.helper"
 
-if [[ -f "${widevine_plugin}" ]]; then
-  codesign_display_and_verify "${widevine_plugin}"
-fi
-
 codesign_display_and_verify "${crashpad_handler}" --deep
 codesign_display_and_verify "${app_mode_loader}" --ignore-resources
 codesign_display_and_verify "${notification_service}" --deep
Index: dev/chrome/installer/mini_installer/chrome.release
===================================================================
--- dev.orig/chrome/installer/mini_installer/chrome.release
+++ dev/chrome/installer/mini_installer/chrome.release
@@ -79,10 +79,8 @@ chrome_200_percent.pak: %(VersionDir)s\
 WidevineCdm\manifest.json: %(VersionDir)s\WidevineCdm\
 WidevineCdm\_platform_specific\win_x86\widevinecdm.dll: %(VersionDir)s\WidevineCdm\_platform_specific\win_x86\
 WidevineCdm\_platform_specific\win_x86\widevinecdm.dll.sig: %(VersionDir)s\WidevineCdm\_platform_specific\win_x86\
-WidevineCdm\_platform_specific\win_x86\widevinecdmadapter.dll: %(VersionDir)s\WidevineCdm\_platform_specific\win_x86\
 WidevineCdm\_platform_specific\win_x64\widevinecdm.dll: %(VersionDir)s\WidevineCdm\_platform_specific\win_x64\
 WidevineCdm\_platform_specific\win_x64\widevinecdm.dll.sig: %(VersionDir)s\WidevineCdm\_platform_specific\win_x64\
-WidevineCdm\_platform_specific\win_x64\widevinecdmadapter.dll: %(VersionDir)s\WidevineCdm\_platform_specific\win_x64\
 
 #
 # MEI Preload sub dir
Index: dev/chrome/test/BUILD.gn
===================================================================
--- dev.orig/chrome/test/BUILD.gn
+++ dev/chrome/test/BUILD.gn
@@ -1963,7 +1963,7 @@ test("browser_tests") {
       # Runtime dependencies.
       data_deps += [
         "//media/cdm/library_cdm/clear_key_cdm",
-        "//third_party/widevine/cdm:widevinecdmadapter",
+        "//third_party/widevine/cdm",
       ]
     }
     if (enable_print_preview) {
@@ -5436,7 +5436,7 @@ if (!is_android && !is_fuchsia) {
       deps += [ "//media/cdm:cdm_paths" ]
       data_deps = [
         "//media/cdm/library_cdm/clear_key_cdm",
-        "//third_party/widevine/cdm:widevinecdmadapter",
+        "//third_party/widevine/cdm",
       ]
     }
 
Index: dev/chrome/tools/build/chromeos/FILES.cfg
===================================================================
--- dev.orig/chrome/tools/build/chromeos/FILES.cfg
+++ dev/chrome/tools/build/chromeos/FILES.cfg
@@ -80,17 +80,12 @@ FILES = [
     'filename': 'xdg-settings',
     'buildtype': ['dev', 'official'],
   },
-  # CDM files (each has an adapter and the actual CDM):
+  # CDM files
   {
     'filename': 'libclearkeycdm.so',
     'buildtype': ['dev', 'official'],
   },
   {
-    'filename': 'libwidevinecdmadapter.so',
-    'arch': ['32bit', '64bit', 'arm'],
-    'buildtype': ['official'],
-  },
-  {
     'filename': 'libwidevinecdm.so',
     'arch': ['32bit', '64bit', 'arm'],
     'buildtype': ['official'],
Index: dev/chrome/tools/build/linux/FILES.cfg
===================================================================
--- dev.orig/chrome/tools/build/linux/FILES.cfg
+++ dev/chrome/tools/build/linux/FILES.cfg
@@ -97,11 +97,6 @@ FILES = [
     'buildtype': ['dev', 'official'],
   },
   {
-    'filename': 'libwidevinecdmadapter.so',
-    'arch': ['32bit', '64bit'],
-    'buildtype': ['official'],
-  },
-  {
     'filename': 'libwidevinecdm.so',
     'arch': ['32bit', '64bit'],
     'buildtype': ['official'],
Index: dev/chrome/tools/build/win/FILES.cfg
===================================================================
--- dev.orig/chrome/tools/build/win/FILES.cfg
+++ dev/chrome/tools/build/win/FILES.cfg
@@ -348,11 +348,6 @@ FILES = [
     'buildtype': ['official'],
   },
   {
-    'filename': 'WidevineCdm/_platform_specific/win_x86/widevinecdmadapter.dll',
-    'arch': ['32bit'],
-    'buildtype': ['official'],
-  },
-  {
     'filename': 'WidevineCdm/_platform_specific/win_x64/widevinecdm.dll',
     'arch': ['64bit'],
     'buildtype': ['official'],
@@ -362,11 +357,6 @@ FILES = [
     'arch': ['64bit'],
     'buildtype': ['official'],
   },
-  {
-    'filename': 'WidevineCdm/_platform_specific/win_x64/widevinecdmadapter.dll',
-    'arch': ['64bit'],
-    'buildtype': ['official'],
-  },
   # ANGLE files:
   {
     'filename': 'D3DCompiler_47.dll',
Index: dev/media/cdm/stub/stub_cdm.cc
===================================================================
--- dev.orig/media/cdm/stub/stub_cdm.cc
+++ /dev/null
@@ -1,166 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "media/cdm/stub/stub_cdm.h"
-
-#include "base/logging.h"
-#include "base/numerics/safe_conversions.h"
-#include "base/strings/string_number_conversions.h"
-
-// Version number for this stub. The third number represents the
-// cdm::ContentDecryptionModule version.
-const char kStubCdmVersion[] = "1.4.8.0";
-
-void INITIALIZE_CDM_MODULE() {
-}
-
-void DeinitializeCdmModule() {
-}
-
-void* CreateCdmInstance(int cdm_interface_version,
-                        const char* /* key_system */,
-                        uint32_t /* key_system_size */,
-                        GetCdmHostFunc get_cdm_host_func,
-                        void* user_data) {
-  DVLOG(1) << "CreateCdmInstance()";
-
-  if (cdm_interface_version != media::StubCdmInterface::kVersion)
-    return nullptr;
-
-  media::StubCdmInterface::Host* host =
-      static_cast<media::StubCdmInterface::Host*>(get_cdm_host_func(
-          media::StubCdmInterface::Host::kVersion, user_data));
-  if (!host)
-    return nullptr;
-
-  return new media::StubCdm(host);
-}
-
-const char* GetCdmVersion() {
-  return kStubCdmVersion;
-}
-
-namespace media {
-
-StubCdm::StubCdm(Host* host) : host_(host), next_session_id_(0) {
-}
-
-StubCdm::~StubCdm() {
-}
-
-void StubCdm::Initialize(bool /* allow_distinctive_identifier */,
-                         bool /* allow_persistent_state */) {
-}
-
-void StubCdm::CreateSessionAndGenerateRequest(
-    uint32_t promise_id,
-    cdm::SessionType /* session_type */,
-    cdm::InitDataType /* init_data_type */,
-    const uint8_t* /* init_data */,
-    uint32_t /* init_data_size */) {
-  // Provide a dummy message (with a trivial session ID) to enable some testing
-  // and be consistent with existing testing without a license server.
-  std::string session_id(base::UintToString(next_session_id_++));
-  host_->OnResolveNewSessionPromise(
-      promise_id, session_id.data(),
-      base::checked_cast<uint32_t>(session_id.length()));
-  host_->OnSessionMessage(session_id.data(),
-                          base::checked_cast<uint32_t>(session_id.length()),
-                          cdm::kLicenseRequest, nullptr, 0, nullptr, 0);
-}
-
-void StubCdm::LoadSession(uint32_t promise_id,
-                          cdm::SessionType /* session_type */,
-                          const char* /* session_id */,
-                          uint32_t /* session_id_length */) {
-  FailRequest(promise_id);
-}
-
-void StubCdm::UpdateSession(uint32_t promise_id,
-                            const char* /* session_id */,
-                            uint32_t /* session_id_length */,
-                            const uint8_t* /* response */,
-                            uint32_t /* response_size */) {
-  FailRequest(promise_id);
-}
-
-void StubCdm::CloseSession(uint32_t promise_id,
-                           const char* /* session_id */,
-                           uint32_t /* session_id_length */) {
-  FailRequest(promise_id);
-}
-
-void StubCdm::RemoveSession(uint32_t promise_id,
-                            const char* /* session_id */,
-                            uint32_t /* session_id_length */) {
-  FailRequest(promise_id);
-}
-
-void StubCdm::SetServerCertificate(
-    uint32_t promise_id,
-    const uint8_t* /* server_certificate_data */,
-    uint32_t /* server_certificate_data_size */) {
-  FailRequest(promise_id);
-}
-
-void StubCdm::TimerExpired(void* /* context */) {
-}
-
-cdm::Status StubCdm::Decrypt(const cdm::InputBuffer& /* encrypted_buffer */,
-                             cdm::DecryptedBlock* /* decrypted_block */) {
-  return cdm::kDecryptError;
-}
-
-cdm::Status StubCdm::InitializeAudioDecoder(
-    const cdm::AudioDecoderConfig& /* audio_decoder_config */) {
-  return cdm::kSuccess;
-}
-
-cdm::Status StubCdm::InitializeVideoDecoder(
-    const cdm::VideoDecoderConfig& /* video_decoder_config */) {
-  return cdm::kSuccess;
-}
-
-void StubCdm::ResetDecoder(cdm::StreamType /* decoder_type */) {
-}
-
-void StubCdm::DeinitializeDecoder(cdm::StreamType /* decoder_type */) {
-}
-
-cdm::Status StubCdm::DecryptAndDecodeFrame(
-    const cdm::InputBuffer& /* encrypted_buffer */,
-    cdm::VideoFrame* /* decoded_frame */) {
-  return cdm::kNoKey;
-}
-
-cdm::Status StubCdm::DecryptAndDecodeSamples(
-    const cdm::InputBuffer& /* encrypted_buffer */,
-    cdm::AudioFrames* /* audio_frames */) {
-  return cdm::kNoKey;
-}
-
-void StubCdm::Destroy() {
-  delete this;
-}
-
-void StubCdm::OnPlatformChallengeResponse(
-    const cdm::PlatformChallengeResponse& /* response */) {
-  NOTREACHED();
-}
-
-void StubCdm::OnQueryOutputProtectionStatus(
-    cdm::QueryResult /* result */,
-    uint32_t /* link_mask */,
-    uint32_t /* output_protection_mask */) {
-  NOTREACHED();
-};
-
-void StubCdm::FailRequest(uint32_t promise_id) {
-  std::string message("Operation not supported by stub CDM.");
-  host_->OnRejectPromise(promise_id, cdm::kInvalidAccessError, 0,
-                         message.data(),
-                         base::checked_cast<uint32_t>(message.length()));
-}
-
-}  // namespace media
Index: dev/media/cdm/stub/stub_cdm.h
===================================================================
--- dev.orig/media/cdm/stub/stub_cdm.h
+++ /dev/null
@@ -1,82 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef MEDIA_CDM_STUB_STUB_CDM_H_
-#define MEDIA_CDM_STUB_STUB_CDM_H_
-
-#include <stdint.h>
-
-#include "base/macros.h"
-#include "media/cdm/api/content_decryption_module.h"
-
-namespace media {
-
-typedef cdm::ContentDecryptionModule_8 StubCdmInterface;
-
-// Dummy implementation of the cdm::ContentDecryptionModule interface.
-class StubCdm : public StubCdmInterface {
- public:
-  explicit StubCdm(Host* host);
-  ~StubCdm() override;
-
-  // StubCdmInterface implementation.
-  void Initialize(bool allow_distinctive_identifier,
-                  bool allow_persistent_state) override;
-  void CreateSessionAndGenerateRequest(uint32_t promise_id,
-                                       cdm::SessionType session_type,
-                                       cdm::InitDataType init_data_type,
-                                       const uint8_t* init_data,
-                                       uint32_t init_data_size) override;
-  void LoadSession(uint32_t promise_id,
-                   cdm::SessionType session_type,
-                   const char* session_id,
-                   uint32_t session_id_length) override;
-  void UpdateSession(uint32_t promise_id,
-                     const char* session_id,
-                     uint32_t session_id_length,
-                     const uint8_t* response,
-                     uint32_t response_size) override;
-  void CloseSession(uint32_t promise_id,
-                    const char* session_id,
-                    uint32_t session_id_length) override;
-  void RemoveSession(uint32_t promise_id,
-                     const char* session_id,
-                     uint32_t session_id_length) override;
-  void SetServerCertificate(uint32_t promise_id,
-                            const uint8_t* server_certificate_data,
-                            uint32_t server_certificate_data_size) override;
-  void TimerExpired(void* context) override;
-  cdm::Status Decrypt(const cdm::InputBuffer& encrypted_buffer,
-                      cdm::DecryptedBlock* decrypted_block) override;
-  cdm::Status InitializeAudioDecoder(
-      const cdm::AudioDecoderConfig& audio_decoder_config) override;
-  cdm::Status InitializeVideoDecoder(
-      const cdm::VideoDecoderConfig& video_decoder_config) override;
-  void DeinitializeDecoder(cdm::StreamType decoder_type) override;
-  void ResetDecoder(cdm::StreamType decoder_type) override;
-  cdm::Status DecryptAndDecodeFrame(const cdm::InputBuffer& encrypted_buffer,
-                                    cdm::VideoFrame* video_frame) override;
-  cdm::Status DecryptAndDecodeSamples(const cdm::InputBuffer& encrypted_buffer,
-                                      cdm::AudioFrames* audio_frames) override;
-  void Destroy() override;
-  void OnPlatformChallengeResponse(
-      const cdm::PlatformChallengeResponse& response) override;
-  void OnQueryOutputProtectionStatus(cdm::QueryResult result,
-                                     uint32_t link_mask,
-                                     uint32_t output_protection_mask) override;
-
- private:
-  // Helper function that rejects the promise specified by |promise_id|.
-  void FailRequest(uint32_t promise_id);
-
-  Host* host_;
-
-  uint32_t next_session_id_;
-
-  DISALLOW_COPY_AND_ASSIGN(StubCdm);
-};
-
-}  // namespace media
-
-#endif  // MEDIA_CDM_STUB_STUB_CDM_H_
Index: dev/third_party/widevine/cdm/BRANDING
===================================================================
--- dev.orig/third_party/widevine/cdm/BRANDING
+++ /dev/null
@@ -1,3 +0,0 @@
-PRODUCT_FULLNAME=Widevine Content Decryption Module Adapter
-PRODUCT_SHORTNAME=Widevine CDM Adapter
-PRODUCT_DESCRIPTION=Widevine Content Decryption Module Adapter enables the Widevine CDM to be used by Chrome.
Index: dev/third_party/widevine/cdm/BUILD.gn
===================================================================
--- dev.orig/third_party/widevine/cdm/BUILD.gn
+++ dev/third_party/widevine/cdm/BUILD.gn
@@ -4,9 +4,7 @@
 
 import("//build/config/chrome_build.gni")
 import("//build/config/features.gni")
-import("//chrome/process_version_rc_template.gni")
 import("//media/cdm/library_cdm/cdm_paths.gni")
-import("//media/cdm/library_cdm/ppapi_cdm_adapter.gni")
 import("//media/media_options.gni")
 import("//third_party/widevine/cdm/widevine.gni")
 
@@ -49,8 +47,9 @@ if (is_android) {
     widevine_cdm_version_h_file = "widevine_cdm_version.h"
   }
 } else if (enable_widevine) {
+  # TODO(crbug.com/349182): Remove after we replace WIDEVINE_CDM_AVAILABLE with
+  # ENABLE_WIDEVINE build flag.
   widevine_cdm_version_h_file = "stub/widevine_cdm_version.h"
-  widevine_cdm_manifest_file = [ "stub/manifest.json" ]
 } else {
   # No branding, use the default one.
   widevine_cdm_version_h_file = "widevine_cdm_version.h"
@@ -78,52 +77,9 @@ source_set("headers") {
   public_deps = [
     ":version_h",  # Forward permission to use version header.
     "//media:media_features",
-    "//ppapi/features",
   ]
 }
 
-if (widevine_cdm_binary_files != []) {
-  copy("widevinecdm") {
-    sources = widevine_cdm_binary_files
-    outputs = [
-      "$root_out_dir/$widevine_cdm_path/{{source_file_part}}",
-    ]
-
-    # TODO(jrummell)
-    # 'COPY_PHASE_STRIP': 'NO',
-  }
-} else if (enable_widevine && enable_library_cdms) {
-  assert(!is_chrome_branded, "Branded Chrome should have binary files to copy.")
-  assert(!is_android, "Android should not have enable_library_cdms.")
-  shared_library("widevinecdm") {
-    output_dir = "$root_out_dir/$widevine_cdm_path"
-    sources = [
-      "//media/cdm/stub/stub_cdm.cc",
-      "//media/cdm/stub/stub_cdm.h",
-    ]
-
-    defines = [ "CDM_IMPLEMENTATION" ]
-
-    deps = [
-      ":version_h",
-      "//base",
-      "//build/config:exe_and_shlib_deps",
-    ]
-
-    if (is_posix && !is_mac) {
-      cflags = [ "-fvisibility=hidden" ]
-    }
-
-    if (is_mac) {
-      ldflags = [ "-Wl,-install_name,@loader_path/libwidevinecdm.dylib" ]
-    }
-  }
-} else {
-  group("widevinecdm") {
-    # NOP
-  }
-}
-
 if (widevine_cdm_manifest_file != []) {
   copy("widevine_cdm_manifest") {
     sources = widevine_cdm_manifest_file
@@ -137,50 +93,29 @@ if (widevine_cdm_manifest_file != []) {
   }
 }
 
-if ((is_chrome_branded || enable_widevine) && enable_library_cdms) {
-  # Produce and compile the .rc file.
-  process_version_rc_template("widevinecdmadapter_resources") {
-    visibility = [ ":*" ]
-    sources = [
-      "BRANDING",
-      "widevinecdmadapter.ver",
-    ]
-    output = "$target_gen_dir/widevinecdmadapter_version.rc"
-  }
-
-  ppapi_cdm_adapter("widevinecdmadapter") {
-    defines = []
-    output_dir = "$root_out_dir/$widevine_cdm_path"
-    deps = [
-      ":version_h",
-      ":widevinecdm",
-      ":widevinecdmadapter_resources",
-    ]
-    data_deps = [
-      ":widevine_cdm_manifest",
-      ":widevinecdm",
+if (widevine_cdm_binary_files != []) {
+  copy("widevine_cdm_binary") {
+    sources = widevine_cdm_binary_files
+    outputs = [
+      "$root_out_dir/$widevine_cdm_path/{{source_file_part}}",
     ]
 
-    if (is_linux) {
-      ldflags =
-          [ rebase_path("$root_out_dir/$widevine_cdm_path/libwidevinecdm.so",
-                        root_build_dir) ]
-    } else if (is_win) {
-      ldflags =
-          [ rebase_path("$root_out_dir/$widevine_cdm_path/widevinecdm.dll.lib",
-                        root_build_dir) ]
-    } else if (is_mac) {
-      ldflags =
-          [ rebase_path("$root_out_dir/$widevine_cdm_path/libwidevinecdm.dylib",
-                        root_build_dir) ]
-    }
+    # TODO(jrummell)
+    # 'COPY_PHASE_STRIP': 'NO',
   }
 } else {
-  # Placeholder when we're not compiling the adapter.
-  group("widevinecdmadapter") {
+  group("widevine_cdm_binary") {
+    # NOP
   }
 }
 
+group("cdm") {
+  public_deps = [
+    ":widevine_cdm_binary",
+    ":widevine_cdm_manifest",
+  ]
+}
+
 # This target exists for tests to depend on that pulls in a runtime dependency
 # on the license server.
 source_set("widevine_test_license_server") {
Index: dev/third_party/widevine/cdm/stub/manifest.json
===================================================================
--- dev.orig/third_party/widevine/cdm/stub/manifest.json
+++ /dev/null
@@ -1,29 +0,0 @@
-{
-  "manifest_version": 2,
-  "name": "WidevineCdm",
-  "description": "Widevine Content Decryption Module Stub",
-  "offline_enabled": false,
-  "version": "0.0.0.000",
-  "minimum_chrome_version": "54.0.0.0",
-  "x-cdm-module-versions": "4",
-  "x-cdm-interface-versions": "8",
-  "x-cdm-host-versions": "8",
-  "x-cdm-codecs": "vp8,vp9.0,avc1",
-  "platforms": [
-    {
-      "os": "win",
-      "arch": "x86",
-      "sub_package_path": "_platform_specific/win_x86/"
-    },
-    {
-      "os": "win",
-      "arch": "x64",
-      "sub_package_path": "_platform_specific/win_x64/"
-    },
-    {
-      "os": "mac",
-      "arch": "x64",
-      "sub_package_path": "_platform_specific/mac_x64/"
-    }
-  ]
-}
Index: dev/third_party/widevine/cdm/widevine.gni
===================================================================
--- dev.orig/third_party/widevine/cdm/widevine.gni
+++ dev/third_party/widevine/cdm/widevine.gni
@@ -2,11 +2,20 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/chrome_build.gni")
+import("//media/media_options.gni")
+
 declare_args() {
-  # Allow widevinecdmadapter to be built in Chromium.
+  # Allow Widevine key system support in Chromium.
   enable_widevine = false
 }
 
+enable_widevine_cdm_host_verification =
+    (is_chrome_branded || enable_widevine) && enable_cdm_host_verification
+
+# Only bundle Widevine CDM in Google Chrome builds.
+should_bundle_widevine_cdm = is_chrome_branded && enable_library_cdms
+
 template("widevine_sign_file") {
   # For official builds, generate a signature file for |file| which will
   # be used by Widevine. If |signature_file| is not specified, the signature
Index: dev/third_party/widevine/cdm/widevinecdmadapter.ver
===================================================================
--- dev.orig/third_party/widevine/cdm/widevinecdmadapter.ver
+++ /dev/null
@@ -1,2 +0,0 @@
-INTERNAL_NAME=widevinecdmadapter_dll
-ORIGINAL_FILENAME=widevinecdmadapter.dll
Index: dev/tools/bisect_repackage/bisect_repackage.py
===================================================================
--- dev.orig/tools/bisect_repackage/bisect_repackage.py
+++ dev/tools/bisect_repackage/bisect_repackage.py
@@ -47,7 +47,6 @@ CHROME_REQUIRED_FILES = {
         'icudtl.dat',
         'libclearkeycdm.so',
         'libwidevinecdm.so',
-        'libwidevinecdmadapter.so',
         'locales/',
         'nacl_helper',
         'nacl_helper_bootstrap',
