Index: dev/build/toolchain/linux/BUILD.gn
===================================================================
--- dev.orig/build/toolchain/linux/BUILD.gn
+++ dev/build/toolchain/linux/BUILD.gn
@@ -39,6 +39,22 @@ gcc_toolchain("arm") {
   }
 }
 
+gcc_toolchain("arm64") {
+  toolprefix = "aarch64-linux-gnu-"
+
+  cc = "${toolprefix}gcc"
+  cxx = "${toolprefix}g++"
+
+  ar = "${toolprefix}ar"
+  ld = cxx
+  readelf = "${toolprefix}readelf"
+  nm = "${toolprefix}nm"
+
+  toolchain_cpu = "arm64"
+  toolchain_os = "linux"
+  is_clang = false
+}
+
 clang_toolchain("clang_x86") {
   toolchain_args = {
     current_cpu = "x86"
Index: dev/tools/gn/args.cc
===================================================================
--- dev.orig/tools/gn/args.cc
+++ dev/tools/gn/args.cc
@@ -268,6 +268,7 @@ void Args::SetSystemVarsLocked(Scope* de
   static const char kX86[] = "x86";
   static const char kX64[] = "x64";
   static const char kArm[] = "arm";
+  static const char kArm64[] = "arm64";
   static const char kMips[] = "mipsel";
   const char* arch = nullptr;
 
@@ -280,10 +281,12 @@ void Args::SetSystemVarsLocked(Scope* de
     arch = kX64;
   else if (os_arch.substr(0, 3) == "arm")
     arch = kArm;
+  else if (os_arch == "aarch64")
+    arch = kArm64;
   else if (os_arch == "mips")
     arch = kMips;
   else
-    CHECK(false) << "OS architecture not handled.";
+    CHECK(false) << "OS architecture not handled: " << os_arch;
 
   // Save the OS and architecture as build arguments that are implicitly
   // declared. This is so they can be overridden in a toolchain build args
