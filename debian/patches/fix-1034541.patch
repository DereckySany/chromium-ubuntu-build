Index: upstream/src/chrome/browser/ui/browser_finder.cc
===================================================================
--- upstream.orig/src/chrome/browser/ui/browser_finder.cc	2013-03-02 05:17:19.531222495 -0600
+++ upstream/src/chrome/browser/ui/browser_finder.cc	2013-03-03 07:29:16.108465221 -0600
@@ -24,6 +24,7 @@
 const int kMatchOriginalProfile         = 1 << 0;
 const int kMatchCanSupportWindowFeature = 1 << 1;
 const int kMatchTabbed                  = 1 << 2;
+const int kMatchNonChromeless           = 1 << 3;
 
 // Returns true if the specified |browser| matches the specified arguments.
 // |match_types| is a bitmask dictating what parameters to match:
@@ -51,7 +52,11 @@
   }
 
   if (match_types & kMatchTabbed)
-    return browser->is_type_tabbed();
+    return browser->is_type_tabbed() &&
+      !browser->is_chromeless_mode();
+ 
+  if (match_types & kMatchNonChromeless)
+    return !browser->is_chromeless_mode();
 
   return true;
 }
@@ -79,7 +84,7 @@
   BrowserList* browser_list_impl = BrowserList::GetInstance(desktop_type);
   if (!browser_list_impl)
     return NULL;
-  uint32 match_types = kMatchAny;
+  uint32 match_types = kMatchNonChromeless;
   if (match_tabbed)
     match_types |= kMatchTabbed;
   if (match_original_profiles)
@@ -177,7 +182,7 @@
   // We are only interested in last active browsers, so we don't fall back to
   // all browsers like FindBrowserWith* do.
   return FindBrowserMatching(list->begin_last_active(), list->end_last_active(),
-                             profile, Browser::FEATURE_NONE, kMatchAny);
+                             profile, Browser::FEATURE_NONE, kMatchNonChromeless);
 }
 
 Browser* FindLastActiveWithHostDesktopType(HostDesktopType type) {
