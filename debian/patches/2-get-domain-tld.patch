Index: dev.raring/src/chrome/browser/extensions/api/tld/tld_api.cc
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ dev.raring/src/chrome/browser/extensions/api/tld/tld_api.cc	2013-05-08 17:02:58.027065129 -0500
@@ -0,0 +1,87 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/extensions/api/tld/tld_api.h"
+
+#include "base/time.h"
+#include "base/values.h"
+#include "chrome/browser/extensions/extension_service.h"
+#include "chrome/common/extensions/extension.h"
+#include "chrome/common/extensions/extension_constants.h"
+#include "googleurl/src/gurl.h"
+#include "googleurl/src/url_parse.h"
+#include "googleurl/src/url_util.h"
+#include "net/base/registry_controlled_domains/registry_controlled_domain.h"
+
+namespace {
+const char kInvalidUriError[] = "Invalid or unsupported URI";
+
+bool IsValidUrl(const GURL& url) {
+  return url.is_valid() && url.IsStandard() &&
+     !url.SchemeIsFile() && !url.SchemeIsFileSystem();
+}
+}  // namespace
+
+bool TldGetBaseDomainFunction::RunImpl() {
+  EXTENSION_FUNCTION_VALIDATE(args_->GetSize() == 1);
+
+  std::string uri;
+  EXTENSION_FUNCTION_VALIDATE(args_->GetString(0, &uri));
+
+  // We might delegate all the url validity check to GetDomainAndRegistry
+  // but try to be more explicit about the errors in some cases.
+  const GURL url(uri);
+  if (!IsValidUrl(url)) {
+    error_ = kInvalidUriError;
+    return false;
+  }
+
+  std::string tld =
+      net::RegistryControlledDomainService::GetDomainAndRegistry(url);
+
+  SetResult(Value::CreateStringValue(tld));
+
+  return true;
+}
+
+
+bool TldGetPublicSuffixFunction::RunImpl() {
+  EXTENSION_FUNCTION_VALIDATE(args_->GetSize() == 2);
+
+  std::string uri;
+  EXTENSION_FUNCTION_VALIDATE(!args_->GetString(0, &uri));
+
+  // We might delegate all the url validity check to GetDomainAndRegistry
+  // or GetRegistryLength but try to be more explicit about the errors in
+  // some cases.
+  const GURL url(uri);
+  if (!IsValidUrl(url)) {
+    error_ = kInvalidUriError;
+    return false;
+  }
+
+  std::string suffix;
+
+  size_t reg_len =
+      net::RegistryControlledDomainService::GetRegistryLength(url, true);
+
+  if (std::string::npos == reg_len || 0 == reg_len)
+    return false;
+
+  std::string tld =
+      net::RegistryControlledDomainService::GetDomainAndRegistry(url);
+
+  if (!tld.empty () && tld.size() > reg_len)
+    suffix = tld.substr(tld.size() - reg_len - 1, reg_len);
+
+  // An empty suffix is a acceptable value since the URL might be
+  // "properly formed" but might fall into cases such as:
+  // * http://co.uk/file.html
+  // * http://<IP address>/file.html
+  // which are described by GetRegistryLength to return 0 (i.e. a valid value).
+  SetResult(Value::CreateStringValue(suffix));
+
+  return true;
+}
+
Index: dev.raring/src/chrome/browser/extensions/api/tld/tld_api.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ dev.raring/src/chrome/browser/extensions/api/tld/tld_api.h	2013-05-08 17:02:58.027065129 -0500
@@ -0,0 +1,28 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_EXTENSIONS_API_TLD_TLD_API_H_
+#define CHROME_BROWSER_EXTENSIONS_API_TLD_TLD_API_H_
+#pragma once
+
+#include "chrome/browser/extensions/extension_function.h"
+
+class TldGetBaseDomainFunction : public SyncExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("tld.getBaseDomain", TLD_GETBASEDOMAIN);
+ protected:
+  virtual ~TldGetBaseDomainFunction() {}
+  virtual bool RunImpl() OVERRIDE;
+};
+
+class TldGetPublicSuffixFunction : public SyncExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("tld.getPublicSuffix", TLD_GETPUBLICSUFFIX);
+ protected:
+  virtual ~TldGetPublicSuffixFunction() {}
+  virtual bool RunImpl() OVERRIDE;
+};
+
+#endif  // CHROME_BROWSER_EXTENSIONS_API_TLD_TLD_API_H_
+
Index: dev.raring/src/chrome/chrome_browser_extensions.gypi
===================================================================
--- dev.raring.orig/src/chrome/chrome_browser_extensions.gypi	2013-05-08 17:02:58.063066370 -0500
+++ dev.raring/src/chrome/chrome_browser_extensions.gypi	2013-05-08 17:02:58.051065956 -0500
@@ -445,6 +445,8 @@
         'browser/extensions/api/tabs/windows_event_router.h',
         'browser/extensions/api/test/test_api.cc',
         'browser/extensions/api/test/test_api.h',
+        'browser/extensions/api/tld/tld_api.cc',
+        'browser/extensions/api/tld/tld_api.h',
         'browser/extensions/api/top_sites/top_sites_api.cc',
         'browser/extensions/api/top_sites/top_sites_api.h',
         'browser/extensions/api/usb/usb_api.cc',
Index: dev.raring/src/chrome/common/extensions/api/api.gyp
===================================================================
--- dev.raring.orig/src/chrome/common/extensions/api/api.gyp	2013-05-08 17:02:58.063066370 -0500
+++ dev.raring/src/chrome/common/extensions/api/api.gyp	2013-05-08 17:02:58.051065956 -0500
@@ -91,6 +91,7 @@
           'tabs.json',
           'terminal_private.json',
           'test.json',
+          'tld.json',
           'top_sites.json',
           'usb.idl',
           'wallpaper_private.json',
Index: dev.raring/src/chrome/common/extensions/api/tld.json
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ dev.raring/src/chrome/common/extensions/api/tld.json	2013-05-08 17:02:58.051065956 -0500
@@ -0,0 +1,54 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+[
+  {
+    "namespace": "tld",
+    "nodoc": "true",
+    "types": [],
+    "functions": [
+      {
+        "name": "getBaseDomain",
+        "type": "function",
+        "description": "Returns the base domain of a URI; that is, the public suffix with a given number of additional domain name parts.",
+        "nodoc": "true",
+        "parameters": [
+          {
+            "name": "uri",
+            "type": "string"
+          },
+          {
+            "type": "function",
+            "name": "callback",
+            "parameters": [
+              {"name": "domain", "type": "string", "description": "The base domain name of the associated URI if any"}
+            ]
+          }
+        ]
+      }
+      ,
+      {
+        "name": "getPublicSuffix",
+        "type": "function",
+        "description": "Returns the public suffix of the domain part of a URI.",
+        "nodoc": "true",
+        "parameters": [
+          {
+            "name": "uri",
+            "type": "string"
+          },
+          {
+            "type": "function",
+            "name": "callback",
+            "parameters": [
+              {"name": "suffix", "type": "string", "description": "The public suffix of the associated URI if any"}
+            ]
+          }
+        ]
+      }
+    ]
+  }
+
+]
+
Index: dev.raring/src/chrome/common/extensions/permissions/permission_set.cc
===================================================================
--- dev.raring.orig/src/chrome/common/extensions/permissions/permission_set.cc	2013-05-08 17:02:58.063066370 -0500
+++ dev.raring/src/chrome/common/extensions/permissions/permission_set.cc	2013-05-08 17:02:58.055066094 -0500
@@ -54,6 +54,7 @@
   "scriptBadge",
   "tabs",
   "test",
+  "tld",
   "types",
   "windows"
 };
Index: dev.raring/src/chrome/browser/extensions/extension_function_histogram_value.h
===================================================================
--- dev.raring.orig/src/chrome/browser/extensions/extension_function_histogram_value.h	2013-05-08 17:02:58.063066370 -0500
+++ dev.raring/src/chrome/browser/extensions/extension_function_histogram_value.h	2013-05-08 17:02:58.059066232 -0500
@@ -491,6 +491,8 @@
   SYNCFILESYSTEM_GETCONFLICTRESOLUTIONPOLICY,
   NETWORKINGPRIVATE_SETPROPERTIES,
   NETWORKINGPRIVATE_GETSTATE,
+  TLD_GETBASEDOMAIN,
+  TLD_GETPUBLICSUFFIX,
   POWER_REQUESTKEEPAWAKE,
   POWER_RELEASEKEEPAWAKE,
   WALLPAPERPRIVATE_SETCUSTOMWALLPAPERLAYOUT,
