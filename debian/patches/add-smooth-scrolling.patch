Source: https://codereview.chromium.org/688253002

Index: dev.wily/AUTHORS
===================================================================
--- dev.wily.orig/AUTHORS
+++ dev.wily/AUTHORS
@@ -593,6 +593,7 @@ Wesley Wigham <t-weswig@microsoft.com>
 Wesley Wigham <wwigham@gmail.com>
 Will Hirsch <chromium@willhirsch.co.uk>
 William Xie <william.xie@intel.com>
+Will Shackleton <w.shackleton@gmail.com>
 Xiang Long <xiang.long@intel.com>
 Xinchao He <hexinchao@gmail.com>
 Xing Zhang <xzhang@adobe.com>
Index: dev.wily/ui/events/devices/x11/device_data_manager_x11.cc
===================================================================
--- dev.wily.orig/ui/events/devices/x11/device_data_manager_x11.cc
+++ dev.wily/ui/events/devices/x11/device_data_manager_x11.cc
@@ -217,6 +217,8 @@ void DeviceDataManagerX11::UpdateDeviceL
     data_type_lookup_[i].clear();
     valuator_min_[i].clear();
     valuator_max_[i].clear();
+    scroll_data_[i].horizontal.number = -1;
+    scroll_data_[i].vertical.number = -1;
     for (int j = 0; j < kMaxSlotNum; j++)
       last_seen_valuator_[i][j].clear();
   }
@@ -272,21 +274,14 @@ void DeviceDataManagerX11::UpdateDeviceL
     for (int j = 0; j < kMaxSlotNum; j++)
       last_seen_valuator_[deviceid][j].resize(DT_LAST_ENTRY, 0);
     for (int j = 0; j < info.num_classes; ++j) {
-      if (info.classes[j]->type != XIValuatorClass)
-        continue;
-
-      XIValuatorClassInfo* v =
-          reinterpret_cast<XIValuatorClassInfo*>(info.classes[j]);
-      for (int data_type = 0; data_type < DT_LAST_ENTRY; ++data_type) {
-        if (v->label == atoms[data_type]) {
-          valuator_lookup_[deviceid][data_type] = v->number;
-          data_type_lookup_[deviceid][v->number] = data_type;
-          valuator_min_[deviceid][data_type] = v->min;
-          valuator_max_[deviceid][data_type] = v->max;
-          if (IsCMTDataType(data_type))
-            possible_cmt = true;
-          break;
-        }
+      if (info.classes[j]->type == XIValuatorClass) {
+        if (UpdateValuatorClassDevice(
+                reinterpret_cast<XIValuatorClassInfo*>(info.classes[j]), atoms,
+                deviceid))
+          possible_cmt = true;
+      } else if (info.classes[j]->type == XIScrollClass) {
+        UpdateScrollClassDevice(
+            reinterpret_cast<XIScrollClassInfo*>(info.classes[j]), deviceid);
       }
     }
 
@@ -295,6 +290,46 @@ void DeviceDataManagerX11::UpdateDeviceL
   }
 }
 
+bool DeviceDataManagerX11::UpdateValuatorClassDevice(
+    XIValuatorClassInfo* valuator_class_info,
+    Atom* atoms,
+    int deviceid) {
+  DCHECK(deviceid >= 0 && deviceid < kMaxDeviceNum);
+  for (int data_type = 0; data_type < DT_LAST_ENTRY; ++data_type) {
+    if (valuator_class_info->label == atoms[data_type]) {
+      valuator_lookup_[deviceid][data_type] = valuator_class_info->number;
+      data_type_lookup_[deviceid][valuator_class_info->number] = data_type;
+      valuator_min_[deviceid][data_type] = valuator_class_info->min;
+      valuator_max_[deviceid][data_type] = valuator_class_info->max;
+      if (IsCMTDataType(data_type))
+        return true;
+    }
+  }
+  return false;
+}
+
+void DeviceDataManagerX11::UpdateScrollClassDevice(
+    XIScrollClassInfo* scroll_class_info,
+    int deviceid) {
+  DCHECK(deviceid >= 0 && deviceid < kMaxDeviceNum);
+  ScrollInfo& info = scroll_data_[deviceid];
+  switch (scroll_class_info->scroll_type) {
+    case XIScrollTypeVertical:
+      info.vertical.number = scroll_class_info->number;
+      info.vertical.increment = scroll_class_info->increment;
+      info.vertical.position = 0;
+      info.vertical.seen = false;
+      break;
+    case XIScrollTypeHorizontal:
+      info.horizontal.number = scroll_class_info->number;
+      info.horizontal.increment = scroll_class_info->increment;
+      info.horizontal.position = 0;
+      info.horizontal.seen = false;
+      break;
+  }
+  scrollclass_devices_[deviceid] = true;
+}
+
 bool DeviceDataManagerX11::GetSlotNumber(const XIDeviceEvent* xiev, int* slot) {
   ui::TouchFactory* factory = ui::TouchFactory::GetInstance();
   if (!factory->IsMultiTouchDevice(xiev->sourceid)) {
@@ -417,6 +452,42 @@ bool DeviceDataManagerX11::IsCMTDeviceEv
   return cmt_devices_[xievent->sourceid];
 }
 
+int DeviceDataManagerX11::GetScrollClassEventDetail(
+    const base::NativeEvent& native_event) const {
+  if (native_event->type != GenericEvent)
+    return SCROLL_TYPE_NO_SCROLL;
+
+  XIDeviceEvent* xievent =
+      static_cast<XIDeviceEvent*>(native_event->xcookie.data);
+  if (xievent->sourceid >= kMaxDeviceNum)
+    return SCROLL_TYPE_NO_SCROLL;
+  if (!scrollclass_devices_[xievent->sourceid])
+    return SCROLL_TYPE_NO_SCROLL;
+  int horizontal_id = scroll_data_[xievent->sourceid].horizontal.number;
+  int vertical_id = scroll_data_[xievent->sourceid].vertical.number;
+  return (XIMaskIsSet(xievent->valuators.mask, horizontal_id)
+              ? SCROLL_TYPE_HORIZONTAL
+              : 0) |
+         (XIMaskIsSet(xievent->valuators.mask, vertical_id)
+              ? SCROLL_TYPE_VERTICAL
+              : 0);
+}
+
+int DeviceDataManagerX11::GetScrollClassDeviceDetail(
+    const base::NativeEvent& native_event) const {
+  XEvent& xev = *native_event;
+  if (xev.type != GenericEvent)
+    return SCROLL_TYPE_NO_SCROLL;
+
+  XIDeviceEvent* xiev = static_cast<XIDeviceEvent*>(xev.xcookie.data);
+  if (xiev->sourceid >= kMaxDeviceNum || xiev->deviceid >= kMaxDeviceNum)
+    return SCROLL_TYPE_NO_SCROLL;
+  const int sourceid = xiev->sourceid;
+  ScrollInfo device_data = scroll_data_[sourceid];
+  return (device_data.vertical.number >= 0 ? SCROLL_TYPE_VERTICAL : 0) |
+         (device_data.horizontal.number >= 0 ? SCROLL_TYPE_HORIZONTAL : 0);
+}
+
 bool DeviceDataManagerX11::IsCMTGestureEvent(
     const base::NativeEvent& native_event) const {
   return (IsScrollEvent(native_event) ||
@@ -509,6 +580,64 @@ void DeviceDataManagerX11::GetScrollOffs
     *finger_count = static_cast<int>(data[DT_CMT_FINGER_COUNT]);
 }
 
+void DeviceDataManagerX11::GetScrollClassOffsets(
+    const base::NativeEvent& native_event,
+    double* x_offset,
+    double* y_offset) {
+  XEvent& xev = *native_event;
+  if (xev.type != GenericEvent)
+    return;
+
+  *x_offset = 0;
+  *y_offset = 0;
+
+  XIDeviceEvent* xiev = static_cast<XIDeviceEvent*>(xev.xcookie.data);
+  if (xiev->sourceid >= kMaxDeviceNum || xiev->deviceid >= kMaxDeviceNum)
+    return;
+  const int sourceid = xiev->sourceid;
+  double* valuators = xiev->valuators.values;
+
+  ScrollInfo& info = scroll_data_[sourceid];
+
+  const int horizontal_number = info.horizontal.number;
+  const int vertical_number = info.vertical.number;
+
+  for (int i = 0; i <= valuator_count_[sourceid]; ++i) {
+    if (!XIMaskIsSet(xiev->valuators.mask, i))
+      continue;
+    if (i == horizontal_number) {
+      double value = *valuators;
+      double delta = 0;
+
+      if (info.horizontal.seen)
+        delta = info.horizontal.position - value;
+
+      info.horizontal.seen = true;
+      info.horizontal.position = value;
+      *x_offset = delta;
+      NormalizeScrollData(sourceid, true, x_offset);
+    } else if (i == vertical_number) {
+      double value = *valuators;
+      double delta = 0;
+      if (info.vertical.seen)
+        delta = info.vertical.position - value;
+
+      info.vertical.seen = true;
+      info.vertical.position = value;
+      *y_offset = delta;
+      NormalizeScrollData(sourceid, false, y_offset);
+    }
+    valuators++;
+  }
+}
+
+void DeviceDataManagerX11::InvalidateScrollClasses() {
+  for (int i = 0; i < kMaxDeviceNum; i++) {
+    scroll_data_[i].horizontal.seen = false;
+    scroll_data_[i].vertical.seen = false;
+  }
+}
+
 void DeviceDataManagerX11::GetFlingData(
     const base::NativeEvent& native_event,
     float* vx,
@@ -602,6 +731,22 @@ bool DeviceDataManagerX11::NormalizeData
   return false;
 }
 
+bool DeviceDataManagerX11::NormalizeScrollData(unsigned int deviceid,
+                                               bool horizontal,
+                                               double* value) {
+  if (deviceid >= static_cast<unsigned int>(kMaxDeviceNum))
+    return false;
+  if (horizontal && scroll_data_[deviceid].horizontal.number < 0)
+    return false;
+  if (!horizontal && scroll_data_[deviceid].vertical.number < 0)
+    return false;
+  double increment = horizontal ? scroll_data_[deviceid].horizontal.increment
+                                : scroll_data_[deviceid].vertical.increment;
+
+  *value /= increment;
+  return true;
+}
+
 bool DeviceDataManagerX11::GetDataRange(int deviceid,
                                         const DataType type,
                                         double* min,
Index: dev.wily/ui/events/devices/x11/device_data_manager_x11.h
===================================================================
--- dev.wily.orig/ui/events/devices/x11/device_data_manager_x11.h
+++ dev.wily/ui/events/devices/x11/device_data_manager_x11.h
@@ -40,6 +40,30 @@ enum GestureMetricsType {
   kGestureMetricsTypeUnknown,
 };
 
+// Information about scroll valuators
+struct ScrollInfo {
+  struct AxisInfo {
+    // The scroll valuator number of this scroll axis.
+    int number;
+    // The scroll increment; a value of n indicates n movement equals one
+    // traditional scroll unit.
+    double increment;
+    // Current scroll position; used to find the difference between events.
+    double position;
+    // If true then scroll has been seen in this direction.
+    bool seen;
+  };
+
+  AxisInfo vertical, horizontal;
+};
+
+// A bitfield describing which scroll axes are enabled for a device.
+enum ScrollType {
+  SCROLL_TYPE_NO_SCROLL = 0,
+  SCROLL_TYPE_HORIZONTAL = 1 << 0,
+  SCROLL_TYPE_VERTICAL = 1 << 1,
+};
+
 // A class that extracts and tracks the input events data. It currently handles
 // mouse, touchpad and touchscreen devices.
 class EVENTS_DEVICES_EXPORT DeviceDataManagerX11 : public DeviceDataManager {
@@ -152,6 +176,16 @@ class EVENTS_DEVICES_EXPORT DeviceDataMa
   // is a CMT event (e.g. it could be a mouse pointer move).
   bool IsCMTDeviceEvent(const base::NativeEvent& native_event) const;
 
+  // Check if the event contains information about a ScrollClass, and
+  // report which scroll axes are contained in this event, defined by
+  // ScrollInfo.
+  int GetScrollClassEventDetail(const base::NativeEvent& native_event) const;
+
+  // Check if the event comes from a device that has a ScrollClass, and
+  // report which scroll axes it supports as a bit field, defined by
+  // ScrollInfo.
+  int GetScrollClassDeviceDetail(const base::NativeEvent& native_event) const;
+
   // Check if the event is one of the CMT gesture events (scroll, fling,
   // metrics etc.).
   bool IsCMTGestureEvent(const base::NativeEvent& native_event) const;
@@ -174,6 +208,17 @@ class EVENTS_DEVICES_EXPORT DeviceDataMa
                         float* y_offset_ordinal,
                         int* finger_count);
 
+  // Extract data from a scroll class event (smooth scrolling). User must
+  // first verify the event type with GetScrollClassEventDetail.
+  // Pointers shouldn't be NULL.
+  void GetScrollClassOffsets(const base::NativeEvent& native_event,
+                             double* x_offset,
+                             double* y_offset);
+
+  // Invalidate stored scroll class counters, since they can change when
+  // pointing at other windows.
+  void InvalidateScrollClasses();
+
   // Extract data from a fling event. User must first verify the event type
   // with IsFlingEvent. Pointers shouldn't be NULL.
   void GetFlingData(const base::NativeEvent& native_event,
@@ -211,6 +256,15 @@ class EVENTS_DEVICES_EXPORT DeviceDataMa
                      const DataType type,
                      double* value);
 
+  // Normalize the scroll amount according to the increment size.
+  // *value /= increment
+  // *value is expected to be 1 or -1.
+  // Returns true and sets the normalized value in |value| if normalization is
+  // successful. Returns false and |value| is unchanged otherwise.
+  bool NormalizeScrollData(unsigned int deviceid,
+                           bool horizontal,
+                           double* value);
+
   // Extract the range of the data type. Return true if the range is available
   // and written into min & max, false if the range is not available.
   bool GetDataRange(int deviceid,
@@ -265,6 +319,16 @@ class EVENTS_DEVICES_EXPORT DeviceDataMa
                                   double min_value,
                                   double max_value);
 
+  // Updates a device based on a Valuator class info. Returns true if the
+  // device is a possible CMT device.
+  bool UpdateValuatorClassDevice(XIValuatorClassInfo* valuator_class_info,
+                                 Atom* atoms,
+                                 int deviceid);
+
+  // Updates a device based on a Scroll class info.
+  void UpdateScrollClassDevice(XIScrollClassInfo* scroll_class_info,
+                               int deviceid);
+
   static const int kMaxXIEventType = XI_LASTEVENT + 1;
   static const int kMaxSlotNum = 10;
 
@@ -278,6 +342,7 @@ class EVENTS_DEVICES_EXPORT DeviceDataMa
   // should be processed.
   std::bitset<kMaxDeviceNum> cmt_devices_;
   std::bitset<kMaxDeviceNum> touchpads_;
+  std::bitset<kMaxDeviceNum> scrollclass_devices_;
 
   // List of the master pointer devices.
   std::vector<int> master_pointers_;
@@ -296,6 +361,10 @@ class EVENTS_DEVICES_EXPORT DeviceDataMa
   // by valuator_lookup_[device_id][data_type].
   std::vector<int> valuator_lookup_[kMaxDeviceNum];
 
+  // Index table to find the horizontal and vertical scroll valuator
+  // numbers, scroll increments and scroll position.
+  ScrollInfo scroll_data_[kMaxDeviceNum];
+
   // Index table to find the DataType for valuator on the specific device
   // by data_type_lookup_[device_id][valuator].
   std::vector<int> data_type_lookup_[kMaxDeviceNum];
Index: dev.wily/ui/events/platform/x11/x11_event_source.cc
===================================================================
--- dev.wily.orig/ui/events/platform/x11/x11_event_source.cc
+++ dev.wily/ui/events/platform/x11/x11_event_source.cc
@@ -139,6 +139,12 @@ uint32_t X11EventSource::DispatchEvent(X
     ui::UpdateDeviceList();
     hotplug_event_handler_->OnHotplugEvent();
   }
+
+  if ((xevent->type == EnterNotify || xevent->type == LeaveNotify) &&
+      xevent->xcrossing.mode == NotifyNormal) {
+    // Clear stored scroll data
+    ui::DeviceDataManagerX11::GetInstance()->InvalidateScrollClasses();
+  }
   return action;
 }
 
Index: dev.wily/ui/events/x/events_x.cc
===================================================================
--- dev.wily.orig/ui/events/x/events_x.cc
+++ dev.wily/ui/events/x/events_x.cc
@@ -440,6 +440,9 @@ EventType EventTypeFromNative(const base
             return devices->IsTouchpadXInputEvent(native_event) ? ET_SCROLL
                                                                 : ET_MOUSEWHEEL;
           }
+          if (devices->GetScrollClassEventDetail(native_event) !=
+              SCROLL_TYPE_NO_SCROLL)
+            return ET_MOUSEWHEEL;
           if (devices->IsCMTMetricsEvent(native_event))
             return ET_UMA_DATA;
           if (GetButtonMaskForX2Event(xievent))
@@ -686,15 +689,22 @@ gfx::Vector2d GetMouseWheelOffset(const
   int button = native_event->type == GenericEvent ?
       EventButtonFromNative(native_event) : native_event->xbutton.button;
 
+  int scroll_class_type =
+      DeviceDataManagerX11::GetInstance()->GetScrollClassDeviceDetail(
+          native_event);
+  bool vertical_scroll_class = scroll_class_type & SCROLL_TYPE_VERTICAL;
+  bool horizontal_scroll_class = scroll_class_type & SCROLL_TYPE_HORIZONTAL;
+
   switch (button) {
     case 4:
-      return gfx::Vector2d(0, kWheelScrollAmount);
+      return gfx::Vector2d(0, vertical_scroll_class ? 0 : kWheelScrollAmount);
     case 5:
-      return gfx::Vector2d(0, -kWheelScrollAmount);
+      return gfx::Vector2d(0, vertical_scroll_class ? 0 : -kWheelScrollAmount);
     case 6:
-      return gfx::Vector2d(kWheelScrollAmount, 0);
+      return gfx::Vector2d(horizontal_scroll_class ? 0 : kWheelScrollAmount, 0);
     case 7:
-      return gfx::Vector2d(-kWheelScrollAmount, 0);
+      return gfx::Vector2d(horizontal_scroll_class ? 0 : -kWheelScrollAmount,
+                           0);
     default:
       return gfx::Vector2d();
   }
@@ -778,30 +788,38 @@ bool GetScrollOffsets(const base::Native
                       float* x_offset_ordinal,
                       float* y_offset_ordinal,
                       int* finger_count) {
-  if (!DeviceDataManagerX11::GetInstance()->IsScrollEvent(native_event))
-    return false;
+  if (DeviceDataManagerX11::GetInstance()->IsScrollEvent(native_event)) {
+    // Temp values to prevent passing NULLs to DeviceDataManager.
+    float x_offset_, y_offset_;
+    float x_offset_ordinal_, y_offset_ordinal_;
+    int finger_count_;
+    if (!x_offset)
+      x_offset = &x_offset_;
+    if (!y_offset)
+      y_offset = &y_offset_;
+    if (!x_offset_ordinal)
+      x_offset_ordinal = &x_offset_ordinal_;
+    if (!y_offset_ordinal)
+      y_offset_ordinal = &y_offset_ordinal_;
+    if (!finger_count)
+      finger_count = &finger_count_;
+
+    DeviceDataManagerX11::GetInstance()->GetScrollOffsets(
+        native_event, x_offset, y_offset, x_offset_ordinal, y_offset_ordinal,
+        finger_count);
+    return true;
+  }
 
-  // Temp values to prevent passing NULLs to DeviceDataManager.
-  float x_offset_, y_offset_;
-  float x_offset_ordinal_, y_offset_ordinal_;
-  int finger_count_;
-  if (!x_offset)
-    x_offset = &x_offset_;
-  if (!y_offset)
-    y_offset = &y_offset_;
-  if (!x_offset_ordinal)
-    x_offset_ordinal = &x_offset_ordinal_;
-  if (!y_offset_ordinal)
-    y_offset_ordinal = &y_offset_ordinal_;
-  if (!finger_count)
-    finger_count = &finger_count_;
-
-  DeviceDataManagerX11::GetInstance()->GetScrollOffsets(
-      native_event,
-      x_offset, y_offset,
-      x_offset_ordinal, y_offset_ordinal,
-      finger_count);
-  return true;
+  if (DeviceDataManagerX11::GetInstance()->GetScrollClassEventDetail(
+          native_event) != SCROLL_TYPE_NO_SCROLL) {
+    double x_scroll_offset, y_scroll_offset;
+    DeviceDataManagerX11::GetInstance()->GetScrollClassOffsets(
+        native_event, &x_scroll_offset, &y_scroll_offset);
+    *x_offset = x_scroll_offset * kWheelScrollAmount;
+    *y_offset = y_scroll_offset * kWheelScrollAmount;
+    return true;
+  }
+  return false;
 }
 
 bool GetFlingData(const base::NativeEvent& native_event,
