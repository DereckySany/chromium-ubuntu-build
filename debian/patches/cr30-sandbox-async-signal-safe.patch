Description: Backported fix for signal handler causing same signal.
Bug-chromium: https://code.google.com/p/chromium/issues/detail?id=255063
Origin: upstream, https://codereview.chromium.org/23461032/


Index: dev.saucy/src/sandbox/linux/seccomp-bpf/die.cc
===================================================================
--- dev.saucy.orig/src/sandbox/linux/seccomp-bpf/die.cc	2013-11-09 13:00:52.896604330 -0500
+++ dev.saucy/src/sandbox/linux/seccomp-bpf/die.cc	2013-11-09 13:00:52.876603605 -0500
@@ -62,6 +62,13 @@
   ExitGroup();
 }
 
+void Die::RawSandboxDie(const char *msg) {
+  if (!msg)
+    msg = "";
+  RAW_LOG(FATAL, msg);
+  ExitGroup();
+}
+
 void Die::SandboxInfo(const char *msg, const char *file, int line) {
   if (!suppress_info_) {
   #if defined(SECCOMP_BPF_STANDALONE)
Index: dev.saucy/src/sandbox/linux/seccomp-bpf/die.h
===================================================================
--- dev.saucy.orig/src/sandbox/linux/seccomp-bpf/die.h	2013-11-09 13:00:52.896604330 -0500
+++ dev.saucy/src/sandbox/linux/seccomp-bpf/die.h	2013-11-09 13:00:52.876603605 -0500
@@ -37,6 +37,8 @@
 
   static void RawSandboxDie(const char *msg) __attribute__((noreturn));
 
+  static void RawSandboxDie(const char *msg) __attribute__((noreturn));
+
   // This method gets called by SANDBOX_INFO(). There is normally no reason
   // to call it directly unless you are defining your own logging macro.
   static void SandboxInfo(const char *msg, const char *file, int line);
