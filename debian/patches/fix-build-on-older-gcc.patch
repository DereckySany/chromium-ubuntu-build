Index: dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
@@ -69,9 +69,10 @@ static bool VerifyDataSize(const VAImage
   const gfx::Size dimensions(base::strict_cast<int>(image->width),
                              base::strict_cast<int>(image->height));
   size_t min_size = 0;
-  if (image->format.fourcc == VA_FOURCC_I420) {
+  if (image->format.fourcc == VA_FOURCC('I', '4', '2', '0')) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_I420, dimensions);
-  } else if (image->format.fourcc == VA_FOURCC_YUY2 ||
+  } else
+	  if (image->format.fourcc == VA_FOURCC_YUY2 ||
              image->format.fourcc == VA_FOURCC('Y', 'U', 'Y', 'V')) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_YUY2, dimensions);
   } else {
@@ -169,7 +170,7 @@ bool VaapiMjpegDecodeAccelerator::Output
   size_t dst_v_stride = video_frame->stride(VideoFrame::kVPlane);
 
   switch (image->format.fourcc) {
-    case VA_FOURCC_I420: {
+    case VA_FOURCC('I', '4', '2', '0'): {
       DCHECK_EQ(image->num_planes, 3u);
       const uint8_t* src_y = mem + image->offsets[0];
       const uint8_t* src_u = mem + image->offsets[1];
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.h
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
@@ -52,7 +52,9 @@ class MEDIA_GPU_EXPORT VaapiVideoEncodeA
  private:
   class H264Accelerator;
   class VP8Accelerator;
+#if VA_CHECK_VERSION(0, 39, 2)
   class VP9Accelerator;
+#endif
 
   // Encoder state.
   enum State {
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
@@ -197,6 +197,7 @@ class VaapiVideoEncodeAccelerator::VP8Ac
   VaapiVideoEncodeAccelerator* const vea_;
 };
 
+#if VA_CHECK_VERSION(0, 39, 2)
 class VaapiVideoEncodeAccelerator::VP9Accelerator
     : public VP9Encoder::Accelerator {
  public:
@@ -217,6 +218,7 @@ class VaapiVideoEncodeAccelerator::VP9Ac
  private:
   VaapiVideoEncodeAccelerator* const vea_;
 };
+#endif
 
 VaapiVideoEncodeAccelerator::VaapiVideoEncodeAccelerator()
     : codec_(kUnknownVideoCodec),
@@ -343,10 +345,12 @@ void VaapiVideoEncodeAccelerator::Initia
           std::make_unique<VP8Encoder>(std::make_unique<VP8Accelerator>(this));
       break;
 
+#if VA_CHECK_VERSION(0, 39, 2)
     case kCodecVP9:
       encoder_ =
           std::make_unique<VP9Encoder>(std::make_unique<VP9Accelerator>(this));
       break;
+#endif
 
     default:
       NOTREACHED() << "Unsupported codec type " << GetCodecName(codec_);
@@ -1220,6 +1224,7 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 2)
 scoped_refptr<VP9Picture>
 VaapiVideoEncodeAccelerator::VP9Accelerator::GetPicture(
     AcceleratedVideoEncoder::EncodeJob* job) {
@@ -1351,5 +1356,6 @@ bool VaapiVideoEncodeAccelerator::VP9Acc
 
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.cc
+++ dev/media/gpu/vaapi/vaapi_wrapper.cc
@@ -976,9 +976,9 @@ bool VASupportedImageFormats::InitSuppor
     // Remove this workaround once b/128340287 is resolved.
     if (std::find_if(supported_formats_.cbegin(), supported_formats_.cend(),
                      [](const VAImageFormat format) {
-                       return format.fourcc == VA_FOURCC_I420;
+                       return format.fourcc == VA_FOURCC('I', '4', '2', '0');
                      }) == supported_formats_.cend()) {
-      supported_formats_.push_back(VAImageFormat{.fourcc = VA_FOURCC_I420});
+      supported_formats_.push_back(VAImageFormat{.fourcc = VA_FOURCC('I', '4', '2', '0')});
     }
   }
   return true;
@@ -1139,7 +1139,7 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     // and IYUV (synonym of I420).
     if (rt_format == VA_RT_FORMAT_YUV420) {
       preferred_fourcc =
-          preferred_fourcc == VA_FOURCC_YV12 ? VA_FOURCC_YV12 : VA_FOURCC_I420;
+          preferred_fourcc == VA_FOURCC_YV12 ? VA_FOURCC_YV12 : VA_FOURCC('I', '4', '2', '0');
     } else if (rt_format == VA_RT_FORMAT_YUV422) {
       preferred_fourcc = VA_FOURCC('Y', 'U', 'Y', 'V');
     } else {
@@ -1168,13 +1168,13 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     //
     if (preferred_fourcc == VA_FOURCC_422H ||
         preferred_fourcc == VA_FOURCC_P010) {
-      preferred_fourcc = VA_FOURCC_I420;
+      preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
     }
   }
 
   if (!VASupportedImageFormats::Get().IsImageFormatSupported(
           VAImageFormat{.fourcc = preferred_fourcc})) {
-    preferred_fourcc = VA_FOURCC_I420;
+    preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
   }
 
   // After workarounds, assume the conversion is supported.
@@ -1757,11 +1757,13 @@ bool VaapiWrapper::Initialize(CodecMode
 
   VAEntrypoint entrypoint = GetVaEntryPoint(mode, va_profile);
 
+#if VA_CHECK_VERSION(0, 39, 1)
   if (mode == CodecMode::kEncode && IsLowPowerEncSupported(va_profile) &&
       base::FeatureList::IsEnabled(kVaapiLowPowerEncoder)) {
     entrypoint = VAEntrypointEncSliceLP;
     DVLOG(2) << "Enable VA-API Low-Power Encode Entrypoint";
   }
+#endif
 
   base::AutoLock auto_lock(*va_lock_);
   std::vector<VAConfigAttrib> required_attribs;
@@ -1880,6 +1882,7 @@ void VaapiWrapper::TryToSetVADisplayAttr
     DVLOG(2) << "vaSetDisplayAttributes unsupported, ignoring by default.";
 }
 
+#if VA_CHECK_VERSION(0, 39, 1)
 // Check the support for low-power encode
 bool VaapiWrapper::IsLowPowerEncSupported(VAProfile va_profile) const {
   // Only enabled for H264/AVC
@@ -1914,5 +1917,6 @@ bool VaapiWrapper::IsLowPowerEncSupporte
   }
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.h
+++ dev/media/gpu/vaapi/vaapi_wrapper.h
@@ -293,8 +293,10 @@ class MEDIA_GPU_EXPORT VaapiWrapper
   // Attempt to set render mode to "render to texture.". Failure is non-fatal.
   void TryToSetVADisplayAttributeToLocalGPU();
 
+#if VA_CHECK_VERSION(0, 39, 1)
   // Check low-power encode support for the given profile
   bool IsLowPowerEncSupported(VAProfile va_profile) const;
+#endif
 
   // Pointer to VADisplayState's member |va_lock_|. Guaranteed to be valid for
   // the lifetime of VaapiWrapper.
Index: dev/media/gpu/vaapi/vaapi_jpeg_decoder.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_jpeg_decoder.cc
+++ dev/media/gpu/vaapi/vaapi_jpeg_decoder.cc
@@ -357,7 +357,7 @@ std::unique_ptr<ScopedVAImage> VaapiJpeg
 std::unique_ptr<ScopedVAImage> VaapiJpegDecoder::DoDecode(
     base::span<const uint8_t> encoded_image,
     VaapiJpegDecodeStatus* status) {
-  return DoDecode(encoded_image, VA_FOURCC_I420 /* preferred_image_fourcc */,
+  return DoDecode(encoded_image, VA_FOURCC('I', '4', '2', '0')/* preferred_image_fourcc */,
                   status);
 }
 
