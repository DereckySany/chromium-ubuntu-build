Index: dev/chrome/browser/ui/views/frame/browser_frame.cc
===================================================================
--- dev.orig/chrome/browser/ui/views/frame/browser_frame.cc
+++ dev/chrome/browser/ui/views/frame/browser_frame.cc
@@ -31,6 +31,7 @@
 #include "ui/native_theme/native_theme_dark_aura.h"
 #include "ui/views/controls/menu/menu_runner.h"
 #include "ui/views/widget/native_widget.h"
+#include "ui/views/widget/native_widget_aura.h"
 
 #if defined(OS_CHROMEOS)
 #include "components/user_manager/user_manager.h"
@@ -128,6 +129,12 @@ BrowserNonClientFrameView* BrowserFrame:
   return browser_frame_view_;
 }
 
+void BrowserFrame::SendSessionIdToWindow() {
+  const Browser& browser = *browser_view_->browser();
+  views::NativeWidget* a = native_browser_frame_->GetWidgetParams().native_widget;
+  a->SetSessionID(browser.session_id().id());
+}
+
 bool BrowserFrame::UseCustomFrame() const {
   return native_browser_frame_->UseCustomFrame();
 }
Index: dev/chrome/browser/ui/views/frame/browser_frame.h
===================================================================
--- dev.orig/chrome/browser/ui/views/frame/browser_frame.h
+++ dev/chrome/browser/ui/views/frame/browser_frame.h
@@ -98,6 +98,8 @@ class BrowserFrame
   // Called when BrowserView creates all it's child views.
   void OnBrowserViewInitViewsComplete();
 
+  void SendSessionIdToWindow();
+
   // Overridden from views::Widget:
   views::internal::RootView* CreateRootView() override;
   views::NonClientFrameView* CreateNonClientFrameView() override;
Index: dev/chrome/browser/ui/views/frame/browser_view.cc
===================================================================
--- dev.orig/chrome/browser/ui/views/frame/browser_view.cc
+++ dev/chrome/browser/ui/views/frame/browser_view.cc
@@ -643,6 +643,7 @@ void BrowserView::Show() {
   force_location_bar_focus_ = false;
 
   browser()->OnWindowDidShow();
+  frame_->SendSessionIdToWindow();
 
   chrome::MaybeShowInvertBubbleView(this);
 }
Index: dev/ash/mus/non_client_frame_controller.cc
===================================================================
--- dev.orig/ash/mus/non_client_frame_controller.cc
+++ dev/ash/mus/non_client_frame_controller.cc
@@ -256,6 +256,10 @@ class ClientViewMus : public views::Clie
     return false;
   }
 
+  void SetSessionID(uint32_t sessionid) {
+    // Do nothing.
+  }
+
  private:
   NonClientFrameController* frame_controller_;
 
Index: dev/ui/aura/client/aura_constants.cc
===================================================================
--- dev.orig/ui/aura/client/aura_constants.cc
+++ dev/ui/aura/client/aura_constants.cc
@@ -9,6 +9,8 @@
 #include "ui/gfx/geometry/rect.h"
 
 DECLARE_EXPORTED_UI_CLASS_PROPERTY_TYPE(AURA_EXPORT, bool)
+// SkColor is typedef'ed to uint32_t
+//DECLARE_EXPORTED_UI_CLASS_PROPERTY_TYPE(AURA_EXPORT, uint32_t)
 DECLARE_EXPORTED_UI_CLASS_PROPERTY_TYPE(AURA_EXPORT, base::string16*)
 DECLARE_EXPORTED_UI_CLASS_PROPERTY_TYPE(AURA_EXPORT, ui::ModalType)
 DECLARE_EXPORTED_UI_CLASS_PROPERTY_TYPE(AURA_EXPORT, gfx::ImageSkia*)
@@ -67,6 +69,7 @@ DEFINE_OWNED_UI_CLASS_PROPERTY_KEY(gfx::
 DEFINE_UI_CLASS_PROPERTY_KEY(ui::mojom::WindowType,
                            kWindowTypeKey,
                            ui::mojom::WindowType::UNKNOWN);
+DEFINE_UI_CLASS_PROPERTY_KEY(uint32_t, kSessionIdKey, 0);
 
 }  // namespace client
 }  // namespace aura
Index: dev/ui/aura/client/aura_constants.h
===================================================================
--- dev.orig/ui/aura/client/aura_constants.h
+++ dev/ui/aura/client/aura_constants.h
@@ -136,6 +136,9 @@ AURA_EXPORT extern const WindowProperty<
 AURA_EXPORT extern const WindowProperty<ui::mojom::WindowType>* const
     kWindowTypeKey;
 
+AURA_EXPORT extern const WindowProperty<uint32_t>* const kSessionIdKey;
+
+
 // Alphabetical sort.
 
 }  // namespace client
Index: dev/ui/aura/window_tree_host_x11.h
===================================================================
--- dev.orig/ui/aura/window_tree_host_x11.h
+++ dev/ui/aura/window_tree_host_x11.h
@@ -38,6 +38,8 @@ class AURA_EXPORT WindowTreeHostX11 : pu
   bool CanDispatchEvent(const ui::PlatformEvent& event) override;
   uint32_t DispatchEvent(const ui::PlatformEvent& event) override;
 
+//  void SetSessionID(uint32_t s) OVERRIDE;
+
   // WindowTreeHost:
   ui::EventSource* GetEventSource() override;
   gfx::AcceleratedWidget GetAcceleratedWidget() override;
Index: dev/ui/views/widget/desktop_aura/desktop_native_widget_aura.cc
===================================================================
--- dev.orig/ui/views/widget/desktop_aura/desktop_native_widget_aura.cc
+++ dev/ui/views/widget/desktop_aura/desktop_native_widget_aura.cc
@@ -598,6 +598,11 @@ void DesktopNativeWidgetAura::ViewRemove
   drop_helper_->ResetTargetViewIfEquals(view);
 }
 
+void DesktopNativeWidgetAura::SetSessionID(unsigned int sessionid) {
+  desktop_window_tree_host_->SetSessionID(sessionid);
+  VLOG(1) << "session id Sent to treehost";
+}
+
 void DesktopNativeWidgetAura::SetNativeWindowProperty(const char* name,
                                                       void* value) {
   if (content_window_)
Index: dev/ui/views/widget/desktop_aura/desktop_native_widget_aura.h
===================================================================
--- dev.orig/ui/views/widget/desktop_aura/desktop_native_widget_aura.h
+++ dev/ui/views/widget/desktop_aura/desktop_native_widget_aura.h
@@ -100,6 +100,8 @@ class VIEWS_EXPORT DesktopNativeWidgetAu
   // Overridden from internal::NativeWidgetPrivate:
   gfx::NativeWindow GetNativeWindow() const override;
 
+  void SetSessionID(uint32_t sessionid);
+
  protected:
   // Overridden from internal::NativeWidgetPrivate:
   void InitNativeWidget(const Widget::InitParams& params) override;
Index: dev/ui/views/widget/desktop_aura/desktop_window_tree_host.h
===================================================================
--- dev.orig/ui/views/widget/desktop_aura/desktop_window_tree_host.h
+++ dev/ui/views/widget/desktop_aura/desktop_window_tree_host.h
@@ -81,6 +81,8 @@ class VIEWS_EXPORT DesktopWindowTreeHost
 
   virtual bool IsVisible() const = 0;
 
+  virtual void SetSessionID(uint32_t sessionid) = 0;
+
   virtual void SetSize(const gfx::Size& size) = 0;
   virtual void StackAbove(aura::Window* window) = 0;
   virtual void StackAtTop() = 0;
Index: dev/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc
===================================================================
--- dev.orig/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc
+++ dev/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc
@@ -12,6 +12,8 @@
 
 #include <utility>
 
+#include <signal.h>
+
 #include "base/command_line.h"
 #include "base/location.h"
 #include "base/memory/ptr_util.h"
@@ -116,6 +118,7 @@ const char* kAtomsToCache[] = {
   "_NET_WM_WINDOW_TYPE_NORMAL",
   "_NET_WM_WINDOW_TYPE_NOTIFICATION",
   "_NET_WM_WINDOW_TYPE_TOOLTIP",
+  "CHROMIUM_LINUX_SESSION_ID_PROPERTY",
   "XdndActionAsk",
   "XdndActionCopy",
   "XdndActionLink",
@@ -1706,6 +1709,22 @@ void DesktopWindowTreeHostX11::UpdateMin
   XSetWMNormalHints(xdisplay_, xwindow_, &hints);
 }
 
+void DesktopWindowTreeHostX11::SetSessionID(uint32_t session_id) {
+  if (session_id != 0) {
+    XChangeProperty(xdisplay_,
+                    xwindow_,
+                    atom_cache_.GetAtom("CHROMIUM_LINUX_SESSION_ID_PROPERTY"),
+                    XA_CARDINAL,
+                    32,
+                    PropModeReplace,
+                    reinterpret_cast<unsigned char*>(&session_id),
+                    1);
+    VLOG(1) << "Sent session id " << session_id << " to X window property";
+  } else {
+    VLOG(1) << "Session id is unlikely number.";
+  }
+}
+
 void DesktopWindowTreeHostX11::UpdateWMUserTime(
     const ui::PlatformEvent& event) {
   if (!IsActive())
Index: dev/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.h
===================================================================
--- dev.orig/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.h
+++ dev/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.h
@@ -87,6 +87,8 @@ class VIEWS_EXPORT DesktopWindowTreeHost
   // Disables event listening to make |dialog| modal.
   std::unique_ptr<base::Closure> DisableEventListening();
 
+  void SetSessionID(uint32_t sessionid);
+
  protected:
   // Overridden from DesktopWindowTreeHost:
   void Init(aura::Window* content_window,
Index: dev/ui/views/widget/native_widget.h
===================================================================
--- dev.orig/ui/views/widget/native_widget.h
+++ dev/ui/views/widget/native_widget.h
@@ -26,6 +26,8 @@ class VIEWS_EXPORT NativeWidget {
  public:
   virtual ~NativeWidget() {}
 
+  virtual void SetSessionID(uint32_t sessionid) = 0;
+
  private:
   friend class Widget;
 
Index: dev/ui/views/widget/native_widget_aura.cc
===================================================================
--- dev.orig/ui/views/widget/native_widget_aura.cc
+++ dev/ui/views/widget/native_widget_aura.cc
@@ -72,6 +72,8 @@
 #include "ui/views/widget/desktop_aura/desktop_window_tree_host.h"
 #endif
 
+#include <signal.h>
+
 DECLARE_UI_CLASS_PROPERTY_TYPE(views::internal::NativeWidgetPrivate*)
 
 namespace views {
@@ -395,6 +397,11 @@ void NativeWidgetAura::CenterWindow(cons
   window_->SetBounds(window_bounds);
 }
 
+void NativeWidgetAura::SetSessionID(uint32_t sessionid) {
+  VLOG(1) << "I have no idea.";
+  raise(SIGABRT);
+}
+
 void NativeWidgetAura::GetWindowPlacement(
     gfx::Rect* bounds,
     ui::WindowShowState* show_state) const {
Index: dev/ui/views/widget/native_widget_aura.h
===================================================================
--- dev.orig/ui/views/widget/native_widget_aura.h
+++ dev/ui/views/widget/native_widget_aura.h
@@ -62,6 +62,8 @@ class VIEWS_EXPORT NativeWidgetAura
       aura::Window* window,
       const Widget::InitParams& params);
 
+  virtual void SetSessionID(uint32_t sessionid) override;
+
   // Overridden from internal::NativeWidgetPrivate:
   void InitNativeWidget(const Widget::InitParams& params) override;
   void OnWidgetInitDone() override;
Index: dev/ui/views/mus/desktop_window_tree_host_mus.cc
===================================================================
--- dev.orig/ui/views/mus/desktop_window_tree_host_mus.cc
+++ dev/ui/views/mus/desktop_window_tree_host_mus.cc
@@ -236,6 +236,10 @@ DesktopWindowTreeHostMus::~DesktopWindow
   desktop_native_widget_aura_->OnDesktopWindowTreeHostDestroyed(this);
 }
 
+void DesktopWindowTreeHostMus::SetSessionID(uint32_t sessionid) {
+  // Do nothing.
+}
+
 void DesktopWindowTreeHostMus::SendClientAreaToServer() {
   if (!ShouldSendClientAreaToServer())
     return;
Index: dev/ui/views/mus/desktop_window_tree_host_mus.h
===================================================================
--- dev.orig/ui/views/mus/desktop_window_tree_host_mus.h
+++ dev/ui/views/mus/desktop_window_tree_host_mus.h
@@ -46,6 +46,8 @@ class VIEWS_MUS_EXPORT DesktopWindowTree
     auto_update_client_area_ = value;
   }
 
+  void SetSessionID(uint32_t sessionid);
+
  private:
   void SendClientAreaToServer();
   void SendHitTestMaskToServer();
