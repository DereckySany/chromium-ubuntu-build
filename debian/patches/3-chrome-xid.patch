Index: dev.vivid/chrome/browser/ui/views/frame/browser_frame.cc
===================================================================
--- dev.vivid.orig/chrome/browser/ui/views/frame/browser_frame.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/chrome/browser/ui/views/frame/browser_frame.cc	2015-06-02 15:12:50.744416284 -0400
@@ -27,6 +27,7 @@
 #include "ui/gfx/screen.h"
 #include "ui/views/controls/menu/menu_runner.h"
 #include "ui/views/widget/native_widget.h"
+#include "ui/views/widget/native_widget_aura.h"
 
 #if defined(OS_CHROMEOS)
 #include "ash/session/session_state_delegate.h"
@@ -126,6 +127,12 @@
   return browser_frame_view_;
 }
 
+void BrowserFrame::SendSessionIdToWindow() {
+  const Browser& browser = *browser_view_->browser();
+  views::NativeWidget* a = native_browser_frame_->GetWidgetParams().native_widget;
+  a->SetSessionID(browser.session_id().id());
+}
+
 bool BrowserFrame::UseCustomFrame() const {
   return native_browser_frame_->UseCustomFrame();
 }
Index: dev.vivid/chrome/browser/ui/views/frame/browser_frame.h
===================================================================
--- dev.vivid.orig/chrome/browser/ui/views/frame/browser_frame.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/chrome/browser/ui/views/frame/browser_frame.h	2015-06-02 15:12:50.744416284 -0400
@@ -94,6 +94,8 @@
   void GetWindowPlacement(gfx::Rect* bounds,
                           ui::WindowShowState* show_state) const;
 
+  void SendSessionIdToWindow();
+
   // Overridden from views::Widget:
   views::internal::RootView* CreateRootView() override;
   views::NonClientFrameView* CreateNonClientFrameView() override;
Index: dev.vivid/chrome/browser/ui/views/frame/browser_view.cc
===================================================================
--- dev.vivid.orig/chrome/browser/ui/views/frame/browser_view.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/chrome/browser/ui/views/frame/browser_view.cc	2015-06-02 15:12:50.746416258 -0400
@@ -699,6 +699,7 @@
   force_location_bar_focus_ = false;
 
   browser()->OnWindowDidShow();
+  frame_->SendSessionIdToWindow();
 
   chrome::MaybeShowInvertBubbleView(this);
 }
Index: dev.vivid/ui/aura/client/aura_constants.cc
===================================================================
--- dev.vivid.orig/ui/aura/client/aura_constants.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/aura/client/aura_constants.cc	2015-06-02 15:12:50.747416245 -0400
@@ -8,6 +8,7 @@
 #include "ui/gfx/geometry/rect.h"
 
 DECLARE_EXPORTED_WINDOW_PROPERTY_TYPE(AURA_EXPORT, bool)
+DECLARE_EXPORTED_WINDOW_PROPERTY_TYPE(AURA_EXPORT, uint32)
 DECLARE_EXPORTED_WINDOW_PROPERTY_TYPE(AURA_EXPORT, ui::ModalType)
 DECLARE_EXPORTED_WINDOW_PROPERTY_TYPE(AURA_EXPORT, gfx::Rect*)
 DECLARE_EXPORTED_WINDOW_PROPERTY_TYPE(AURA_EXPORT, ui::InputMethod*)
@@ -37,6 +38,7 @@
 DEFINE_WINDOW_PROPERTY_KEY(ui::InputMethod*, kRootWindowInputMethodKey, NULL);
 DEFINE_WINDOW_PROPERTY_KEY(
     ui::WindowShowState, kShowStateKey, ui::SHOW_STATE_DEFAULT);
+DEFINE_WINDOW_PROPERTY_KEY(uint32, kSessionIdKey, 0);
 
 }  // namespace client
 }  // namespace aura
Index: dev.vivid/ui/aura/client/aura_constants.h
===================================================================
--- dev.vivid.orig/ui/aura/client/aura_constants.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/aura/client/aura_constants.h	2015-06-02 15:12:50.747416245 -0400
@@ -65,6 +65,9 @@
 AURA_EXPORT extern const WindowProperty<ui::WindowShowState>* const
     kShowStateKey;
 
+AURA_EXPORT extern const WindowProperty<uint32>* const kSessionIdKey;
+
+
 // Alphabetical sort.
 
 }  // namespace client
Index: dev.vivid/ui/aura/window_tree_host_x11.cc
===================================================================
--- dev.vivid.orig/ui/aura/window_tree_host_x11.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/aura/window_tree_host_x11.cc	2015-06-02 15:12:50.747416245 -0400
@@ -456,6 +456,26 @@
   return xwindow_;
 }
 
+#if 0
+void WindowTreeHostX11::SetSessionID(uint32 session_id) {
+  VLOG(1) << "BROKEN delete this session writer.";
+
+  if (session_id != 0) {
+    XChangeProperty(xdisplay_,
+                    xwindow_,
+                    atom_cache_.GetAtom("CHROMIUM_LINUX_SESSION_ID_PROPERTY"),
+                    XA_CARDINAL,
+                    32,
+                    PropModeReplace,
+                    reinterpret_cast<unsigned char*>(session_id),
+                    1);
+    VLOG(1) << " DID  set session_id as window property because we have a session " << session_id;
+  } else {
+    VLOG(1) << "can't set session_id as window property because we don't have a session yet.";
+  }
+}
+#endif
+
 void WindowTreeHostX11::Show() {
   if (!window_mapped_) {
     // Before we map the window, set size hints. Otherwise, some window managers
Index: dev.vivid/ui/aura/window_tree_host_x11.h
===================================================================
--- dev.vivid.orig/ui/aura/window_tree_host_x11.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/aura/window_tree_host_x11.h	2015-06-02 15:12:50.748416232 -0400
@@ -41,6 +41,8 @@
   bool CanDispatchEvent(const ui::PlatformEvent& event) override;
   uint32_t DispatchEvent(const ui::PlatformEvent& event) override;
 
+//  void SetSessionID(uint32 s) OVERRIDE;
+
   // WindowTreeHost:
   ui::EventSource* GetEventSource() override;
   gfx::AcceleratedWidget GetAcceleratedWidget() override;
Index: dev.vivid/ui/views/widget/desktop_aura/desktop_native_widget_aura.cc
===================================================================
--- dev.vivid.orig/ui/views/widget/desktop_aura/desktop_native_widget_aura.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/desktop_aura/desktop_native_widget_aura.cc	2015-06-02 15:12:50.748416232 -0400
@@ -599,6 +599,11 @@
   drop_helper_->ResetTargetViewIfEquals(view);
 }
 
+void DesktopNativeWidgetAura::SetSessionID(unsigned int sessionid) {
+  desktop_window_tree_host_->SetSessionID(sessionid);
+  VLOG(1) << "session id Sent to treehost";
+}
+
 void DesktopNativeWidgetAura::SetNativeWindowProperty(const char* name,
                                                       void* value) {
   if (content_window_)
Index: dev.vivid/ui/views/widget/desktop_aura/desktop_native_widget_aura.h
===================================================================
--- dev.vivid.orig/ui/views/widget/desktop_aura/desktop_native_widget_aura.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/desktop_aura/desktop_native_widget_aura.h	2015-06-02 15:12:50.748416232 -0400
@@ -93,6 +93,8 @@
   // we are being activated/deactivated.
   void HandleActivationChanged(bool active);
 
+  void SetSessionID(uint32 sessionid);
+
  protected:
   // Overridden from internal::NativeWidgetPrivate:
   void InitNativeWidget(const Widget::InitParams& params) override;
Index: dev.vivid/ui/views/widget/desktop_aura/desktop_window_tree_host.h
===================================================================
--- dev.vivid.orig/ui/views/widget/desktop_aura/desktop_window_tree_host.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/desktop_aura/desktop_window_tree_host.h	2015-06-02 15:12:50.748416232 -0400
@@ -80,6 +80,8 @@
 
   virtual bool IsVisible() const = 0;
 
+  virtual void SetSessionID(uint32 sessionid) = 0;
+
   virtual void SetSize(const gfx::Size& size) = 0;
   virtual void StackAtTop() = 0;
   virtual void CenterWindow(const gfx::Size& size) = 0;
Index: dev.vivid/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc
===================================================================
--- dev.vivid.orig/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc	2015-06-02 15:12:50.749416219 -0400
@@ -10,6 +10,8 @@
 #include <X11/Xregion.h>
 #include <X11/Xutil.h>
 
+#include <signal.h>
+
 #include "base/basictypes.h"
 #include "base/command_line.h"
 #include "base/strings/stringprintf.h"
@@ -106,6 +108,7 @@
   "_NET_WM_WINDOW_TYPE_NORMAL",
   "_NET_WM_WINDOW_TYPE_NOTIFICATION",
   "_NET_WM_WINDOW_TYPE_TOOLTIP",
+  "CHROMIUM_LINUX_SESSION_ID_PROPERTY",
   "XdndActionAsk",
   "XdndActionCopy"
   "XdndActionLink",
@@ -1358,6 +1361,22 @@
   XSetWMNormalHints(xdisplay_, xwindow_, &hints);
 }
 
+void DesktopWindowTreeHostX11::SetSessionID(uint32 session_id) {
+  if (session_id != 0) {
+    XChangeProperty(xdisplay_,
+                    xwindow_,
+                    atom_cache_.GetAtom("CHROMIUM_LINUX_SESSION_ID_PROPERTY"),
+                    XA_CARDINAL,
+                    32,
+                    PropModeReplace,
+                    reinterpret_cast<unsigned char*>(&session_id),
+                    1);
+    VLOG(1) << "Sent session id " << session_id << " to X window property";
+  } else {
+    VLOG(1) << "Session id is unlikely number.";
+  }
+}
+
 void DesktopWindowTreeHostX11::UpdateWMUserTime(
     const ui::PlatformEvent& event) {
   if (!IsActive())
Index: dev.vivid/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.h
===================================================================
--- dev.vivid.orig/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/desktop_aura/desktop_window_tree_host_x11.h	2015-06-02 15:12:50.749416219 -0400
@@ -86,6 +86,8 @@
   // Deallocates the internal list of open windows.
   static void CleanUpWindowList();
 
+  void SetSessionID(uint32 sessionid);
+
  protected:
   // Overridden from DesktopWindowTreeHost:
   void Init(aura::Window* content_window,
Index: dev.vivid/ui/views/widget/native_widget.h
===================================================================
--- dev.vivid.orig/ui/views/widget/native_widget.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/native_widget.h	2015-06-02 15:12:50.749416219 -0400
@@ -26,6 +26,8 @@
  public:
   virtual ~NativeWidget() {}
 
+  virtual void SetSessionID(uint32 sessionid) = 0;
+
  private:
   friend class Widget;
 
Index: dev.vivid/ui/views/widget/native_widget_aura.cc
===================================================================
--- dev.vivid.orig/ui/views/widget/native_widget_aura.cc	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/native_widget_aura.cc	2015-06-02 15:12:50.749416219 -0400
@@ -60,6 +60,8 @@
 #include "ui/views/widget/desktop_aura/desktop_window_tree_host.h"
 #endif
 
+#include <signal.h>
+
 namespace views {
 
 namespace {
@@ -339,6 +341,11 @@
   window_->SetBounds(window_bounds);
 }
 
+void NativeWidgetAura::SetSessionID(uint32 sessionid) {
+  VLOG(1) << "I have no idea.";
+  raise(SIGABRT);
+}
+
 void NativeWidgetAura::GetWindowPlacement(
     gfx::Rect* bounds,
     ui::WindowShowState* show_state) const {
Index: dev.vivid/ui/views/widget/native_widget_aura.h
===================================================================
--- dev.vivid.orig/ui/views/widget/native_widget_aura.h	2015-06-02 15:12:50.753416167 -0400
+++ dev.vivid/ui/views/widget/native_widget_aura.h	2015-06-02 15:12:50.750416206 -0400
@@ -50,6 +50,8 @@
       internal::NativeWidgetPrivate* native_widget,
       aura::Window* window);
 
+  virtual void SetSessionID(uint32 sessionid) override;
+
   // Overridden from internal::NativeWidgetPrivate:
   void InitNativeWidget(const Widget::InitParams& params) override;
   NonClientFrameView* CreateNonClientFrameView() override;
