#!/usr/bin/make -f

DEBIAN_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
DEBIAN_VERSION		:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
DEBIAN_UPSTREAM_VERSION	:= $(shell echo $(DEBIAN_VERSION) | sed 's/^\(.*\)-[^-]*$$/\1/')
DEBIAN_REVISION		:= $(shell echo $(DEBIAN_VERSION) | sed 's/^.*r\([^-]*\)-.*/\1/')
DEBIAN_DIST		:= $(shell lsb_release -ds | tr -d '()')
DEBIAN_DIST_NAME	:= $(shell lsb_release -si)
DEBIAN_DIST_VERSION	:= $(shell lsb_release -sr)
DEBIAN_CODECS_NAME      := $(subst browser,codecs-ffmpeg,$(DEBIAN_NAME))

# DEB_TAR_SRCDIR has to be 'src' as this is what gyp expects :(
DEB_TAR_SRCDIR := src
SRC_DIR        := $(CURDIR)/$(DEB_TAR_SRCDIR)
LIB_DIR        := usr/lib/$(DEBIAN_NAME)
DEB_BUILDDIR   := $(SRC_DIR)

ifneq (,$(findstring Ubuntu,$(DEBIAN_DIST)))
UBUNTU_DIST=$(DEBIAN_DIST)
 ifneq (,$(findstring 10.04,$(DEBIAN_DIST)))
BINARY_PACKAGE_COMPRESSION ?= bzip2# bzip2, gzip, lzma, xz, none
 else
BINARY_PACKAGE_COMPRESSION ?= xz# bzip2, gzip, lzma, xz, none
 endif
else
BINARY_PACKAGE_COMPRESSION ?= xz# bzip2, gzip, lzma, xz, none
endif

WANT_XZ_DEBS     ?= 1
WANT_DEBUG       := 0
WANT_SYSTEM_LIBS ?= 1
WANT_SHARED_LIBS ?= 0
PROCESSORS       ?= $(shell grep -ic ^processor /proc/cpuinfo)
ifeq (0,$(PROCESSORS))
PROCESSORS := 1
endif

# Enable the hardening wrapper (See https://wiki.ubuntu.com/Security/HardeningWrapper)
# Don't do it on maverick/armel either for now, it fails to link
# Don't do it on lucid/armel either, it crashes: LP #716703
ifeq (armel,$(DEB_BUILD_ARCH))
ifeq (,$(filter 10.04 10.10 11.04 11.10 12.04 12.10 13.04,$(DEBIAN_DIST_VERSION)))
export DEB_BUILD_HARDENING=1
else
$(warning ## Not enabling DEB_BUILD_HARDENING on Ubuntu 10.04+ armel. See LP #641126 and LP #716703)
endif
endif
$(warning ## DEB_BUILD_HARDENING=$(DEB_BUILD_HARDENING))

# Disable SSE2 and enable sandbox
GYP_DEFINES = disable_sse2=1 \
		linux_sandbox_path=/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox \
		linux_sandbox_chrome_path=/$(LIB_DIR)/$(DEBIAN_NAME) \
		$(NULL)

# Needed to preserve the suid and make the sandbox happy
DEB_FIXPERMS_EXCLUDE := $(DEBIAN_NAME)-sandbox

# Build the launchpad translations (already landed upstream)
GYP_DEFINES += use_third_party_translations=0
# Also merges the newer translations from launchpad
## Policy: 2012-10-30, cm,kv,cc, disabling merging of LP translations. "0"
WANT_LP_TRANSLATIONS ?= 0
## Rationale: Instead of merging other stuff before "orig" (!) tarball
## creation, let's export translation templates to Launchpad, and send them
## upstream to be included in the real orig source.  It's slower for circuit,
## but all users win, and is less buggy for us.
##

# Only keep -Werror when building for the Debian or Ubuntu development branches
ifeq (,$(filter unstable development,$(DEBIAN_DIST)))
GYP_DEFINES += werror=$(NULL)
endif

# Disable NaCl until we figure out what to do with the private toolchain
GYP_DEFINES += disable_nacl=1

# do not use third_party/gold as the linker.
GYP_DEFINES += linux_use_gold_binary=0 linux_use_gold_flags=0

ifeq (arm,$(DEB_HOST_ARCH_CPU))
GYP_DEFINES += \
	target_arch=arm \
	disable_nacl=1 \
	linux_use_tcmalloc=0 \
	enable_webrtc=0 \
	use_cups=1 \
	$(NULL)
 ifeq (armel,$(DEB_HOST_ARCH))
GYP_DEFINES += \
	v8_use_arm_eabi_hardfloat=false \
	arm_float_abi=soft \
	arm_thumb=0 \
	armv7=0 \
	arm_neon=0 \
	$(NULL)
 endif
 ifeq (armhf,$(DEB_HOST_ARCH))
GYP_DEFINES += -DUSE_EABI_HARDFLOAT 
GYP_DEFINES += \
	v8_use_arm_eabi_hardfloat=true \
	arm_fpu=vfpv3-d16 \
	arm_float_abi=hard \
	arm_thumb=1 \
	arm_neon=0 \
	$(NULL)
  ifneq (,$(filter 10.10% 11.04% 11.10% 12.04% 12.10% 13.04% 13.10%,$(UBUNTU_DIST))$(filter unstable development,$(DEBIAN_DIST)))
GYP_DEFINES += \
	armv7=1 \
	$(NULL)
  endif
 endif
endif

ifeq (amd64,$(DEB_BUILD_ARCH))
GYP_DEFINES += target_arch=x64
endif

ifeq (i386,$(DEB_BUILD_ARCH))
GYP_DEFINES += target_arch=ia32
endif

# Don't let dh_installinit install *.default in /etc/default
DEB_DH_INSTALLINIT_ARGS += --noscripts --onlyscripts

# Don't let scour touch the svg files
DEB_DH_SCOUR_ARGS += -Xsvg

ifeq (1,$(WANT_DEBUG))
BUILD_TYPE := Debug
else
BUILD_TYPE := Release
# Add symbols
BUILD_ARGS += SYMBOLS=1
endif
BUILD_ARGS += BUILDTYPE=$(BUILD_TYPE)
BUILD_ARGS += V=1

# Shared libraries
ifeq (1,$(WANT_SHARED_LIBS))
GYP_DEFINES += library=shared_library
endif

# Use upstream build flags (defined in build/common.gypi)
BUILD_ARGS += CFLAGS="" CXXFLAGS="" CPPFLAGS="" LDFLAGS=""

CC_VERSION   := $(shell gcc -dumpversion | cut -d. -f-2)

# Set this to use gcc 4.7 instead of 4.8
AVOID_GCC_48 ?= 0
ifeq (4.8,$(CC_VERSION))
GYP_DEFINES += werror=$(NULL)
ifeq (1,$(AVOID_GCC_48))
CC  := gcc-4.7
CXX := g++-4.7
BUILD_ARGS += CC=$(CC) CXX=$(CXX) CC.host=$(CC) CXX.host=$(CXX) LINK.host=$(CXX)
endif
endif

subst_files = \
	debian/$(DEBIAN_NAME).sh \
	$(NULL)

ifneq (1,$(PROCESSORS))
BUILD_ARGS += -j$(PROCESSORS)
endif

INSTALL_EXCLUDE_DIRS = \
	obj \
	obj.target \
	obj.host \
	.deps \
	calendar_app \
	docs_app \
	gmail_app \
	pyproto \
	pseudo_locales \
	locales \
	$(NULL)

INSTALL_EXCLUDE_FILES = \
	chrome-wrapper \
	product_logo_48.png \
	libnpapi_layout_test_plugin.so \
	libnpapi_test_plugin.so \
	mksnapshot \
	ncdecode_table \
	ncdecode_tablegen \
	ssl_false_start_blacklist_process \
	protoc \
	gfx_unittests \
	linker.lock \
	genmacro \
	genmodule \
	genperf \
	genstring \
	genversion \
	re2c \
	yasm \
	libvpx_obj_int_extract \
	$(NULL)

# FFmpeg-mt
# Don't build it as part of chromium. Build it separately twice, once with
# the Chrome branding to gain the extra codecs, and once without branding.
# The ffmpeg_branding variable controls which codecs are built inside the sumo lib.
# By default, ffmpeg_branding equals to "Chromium" and only builds the ogg/vorbis/theora codecs.
# When set to "Chrome", it also builds aac/ac3/mpeg4audio/h264/mov/mp3
BROWSER_GYP_DEFINES += \
	proprietary_codecs=1 \
	build_ffmpegsumo=0 \
	$(NULL)
FFMPEG_MT_GYP_DEFINES = \
	use_system_vpx=0 \
	release_extra_cflags=-g \
	$(NULL)
FFMPEG_MT_STD_GYP_DEFINES   = $(NULL)
FFMPEG_MT_EXTRA_GYP_DEFINES = ffmpeg_branding=Chrome

ifneq (,$(filter 12.10 unstable development,$(DEBIAN_DIST)))
# enable compile-time dependency on gnome-keyring
GYP_DEFINES += use_gnome_keyring=1 linux_link_gnome_keyring=1
# controlling the use of GConf (the classic GNOME configuration
# and GIO, which contains GSettings (the new GNOME config system)
GYP_DEFINES += use_gconf=1 use_gio=1
endif

#USE_SYSTEM_SQLITE := $(shell pkg-config 'sqlite3 >= 3.6.1' && echo 1 || echo 0)
# undefined reference to 'chromium_sqlite3_initialize_unix_sqlite3_file'
USE_SYSTEM_SQLITE := 0
USE_SYSTEM_V8 := 0
ifneq (,$(filter 8.10 9.04,$(DEBIAN_DIST)))
# Don't build with system zlib on Intrepid/Jaunty. See http://crbug.com/38073
USE_SYSTEM_ZLIB = 0
else
USE_SYSTEM_ZLIB = 1
endif
# Recursive third-party/opus/opus.h self-#inclusion.  Disabled for now.
USE_SYSTEM_OPUS = 0
# 'WebPPictureImportBGRX' was not declared
USE_SYSTEM_WEBP = 0
# minizip/unzip.h: No such file or directory
USE_SYSTEM_MINIZIP = 0
USE_SYSTEM_LIBSRTP = 0
USE_SYSTEM_HARFBUZZ = $(shell pkg-config 'libharfbuzz-dev' && echo 1 || echo 0)

# System libs
ifeq (1,$(WANT_SYSTEM_LIBS))
GYP_DEFINES += \
	use_system_bzip2=1 \
	use_system_libjpeg=1 \
	use_system_libpng=1 \
	use_system_sqlite=$(USE_SYSTEM_SQLITE) \
	use_system_libxml=$(USE_SYSTEM_LIBXML) \
	use_system_libxslt=1 \
	use_system_v8=$(USE_SYSTEM_V8) \
	use_system_flac=1 \
	use_system_harfbuzz=$(USE_SYSTEM_HARFBUZZ) \
	use_system_icu=1 \
	use_system_libevent=1 \
	use_system_libsrtp=$(USE_SYSTEM_LIBSRTP) \
	use_system_libusb=1 \
	use_system_libvpx=1 \
	use_system_libwebp=$(USE_SYSTEM_WEBP) \
	use_system_minizip=$(USE_SYSTEM_MINIZIP) \
	use_system_opus=$(USE_SYSTEM_OPUS) \
	use_system_protobuf=1 \
	use_system_speex=1 \
	use_system_xdg_utils=1 \
	use_system_yasm=1 \
	use_system_zlib=$(USE_SYSTEM_ZLIB) \
	$(NULL)
endif

# Build everything (like All), including test programs but minus things we don't
# want (breakpad, courgette, ..) or don't need (the other small tools)
BUILD_TARGETS += \
	chrome \
	chrome_sandbox \
	$(NULL)

######
DEB_MAKE_EXTRA_ARGS   := $(NULL)
DEB_MAKE_BUILD_TARGET := $(BUILD_ARGS) $(BUILD_TARGETS)

GYP_ENV := GYP_GENERATORS=make
ifneq (,$(GYP_DEFINES))
	GYP_ENV += GYP_DEFINES="$(GYP_DEFINES) $(BROWSER_GYP_DEFINES)"
endif

clean:
	rm -rf debian/*-stamp debian/stamp-* debian/tmp-*
	rm -f $(subst_files)
	rm -rf third_party chrome $(DEB_TAR_SRCDIR)/out
	sed -i 's,/etc/$(DEBIAN_NAME)/policies,/etc/chromium/policies,' \
		$(DEB_TAR_SRCDIR)/chrome/common/chrome_paths.cc

	dh_clean

configure: configure-stamp
configure-stamp:
	dh_testdir
	
	sed -e 's/@BUILD_DIST@/$(DEBIAN_DIST_NAME) $(DEBIAN_DIST_VERSION)/g' \
	    -e 's/@BUILD_DIST_NAME@/$(DEBIAN_DIST_NAME)/g' \
	    -e 's/@BUILD_DIST_VERSION@/$(DEBIAN_DIST_VERSION)/g' \
	    debian/chromium-browser.sh.in > debian/chromium-browser.sh
	
	sed -i 's,/etc/chromium/policies,/etc/$(DEBIAN_NAME)/policies,' \
		$(DEB_TAR_SRCDIR)/chrome/common/chrome_paths.cc
	
	cd $(SRC_DIR) && $(GYP_ENV) python build/gyp_chromium --no-circular-check build/all.gyp
	# Populate the LASTCHANGE file template as we no longer have the VCS files at this point
	echo "$(DEBIAN_REVISION)" > $(SRC_DIR)/build/LASTCHANGE.in
	touch $@

build: configure-stamp build-stamp build-stamp-ffmpeg-std build-stamp-ffmpeg-extra
	touch $@

build-stamp: configure-stamp
	$(MAKE) -C $(SRC_DIR) $(BUILD_ARGS) $(BUILD_TARGETS)
	touch $@

binary-indep: build install
	dh_testdir
	dh_testroot
	dh_install
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb -- -Z$(BINARY_PACKAGE_COMPRESSION)

binary-arch: build install
	dh_testdir
	dh_testroot
	dh_install
	dh_installmenu
	dh_compress
	dh_fixperms --exclude $(DEB_FIXPERMS_EXCLUDE)
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb -- -Z$(BINARY_PACKAGE_COMPRESSION)

binary: binary-indep binary-arch

configure-stamp-ffmpeg-%:
	rm -rf $(FFMPEG_SRC_DIR)/*.mk $(FFMPEG_SRC_DIR)/out
	cd $(SRC_DIR) && GYP_DEFINES="$(GYP_DEFINES)" GYP_GENERATORS=make build/gyp_chromium --depth=../src $(FFMPEG_DIR)/ffmpeg.gyp
	touch $@

build-stamp-ffmpeg-%: GYP_DEFINES += $(FFMPEG_MT_$(subst std,STD,$(subst extra,EXTRA,$*))_GYP_DEFINES) $(FFMPEG_MT_GYP_DEFINES)
build-stamp-ffmpeg-%: FFMPEG_DIR = third_party/ffmpeg
build-stamp-ffmpeg-%: FFMPEG_SRC_DIR = $(SRC_DIR)/$(FFMPEG_DIR)
build-stamp-ffmpeg-%: BUILD_ARGS += CFLAGS="" CXXFLAGS="" CPPFLAGS="" LDFLAGS=""
build-stamp-ffmpeg-%: configure-stamp-ffmpeg-%
	cd $(FFMPEG_SRC_DIR) ; $(MAKE) -f ffmpeg.Makefile $(BUILD_ARGS)
	mkdir debian/tmp-$*
	cp $(FFMPEG_SRC_DIR)/out/$(BUILD_TYPE)/libffmpegsumo.so $(CURDIR)/debian/tmp-$*
	touch $@

install: build
	dh_testdir
	dh_testroot
	dh_prep
	
	dh_installdirs --package=$(DEBIAN_NAME) $(LIB_DIR)
	# Tar up out except $(INSTALL_EXCLUDE_DIRS), extract it, and then remove $(INSTALL_EXCLUDE_FILES)
	( cd $(SRC_DIR)/out/$(BUILD_TYPE) && tar $(foreach excl,$(INSTALL_EXCLUDE_DIRS),--exclude=$(excl)) -cf - . ) | \
	( cd debian/$(DEBIAN_NAME)/$(LIB_DIR) && tar xvf - )
	cd debian/$(DEBIAN_NAME)/$(LIB_DIR) && rm -f $(INSTALL_EXCLUDE_FILES)
	# Launcher script
	dh_installdirs --package=$(DEBIAN_NAME) usr/bin
	cp -a debian/$(DEBIAN_NAME).sh debian/$(DEBIAN_NAME)/usr/bin/$(DEBIAN_NAME)
	chmod 755 debian/$(DEBIAN_NAME)/usr/bin/$(DEBIAN_NAME)
	# Preferences
	dh_installdirs --package=$(DEBIAN_NAME) etc/$(DEBIAN_NAME)
	cp -a debian/$(DEBIAN_NAME).default debian/$(DEBIAN_NAME)/etc/$(DEBIAN_NAME)/default
	# Rename the binary from chrome to $(DEBIAN_NAME), this is required
	# as chromium dereferences all symlinks before starting its children
	# making the Gnome System Monitor confused with icons
	mv debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)
	mv debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome_sandbox debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
	# Manpage
	mv debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome.1 debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME).1
	dh_installman --package=$(DEBIAN_NAME) debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME).1
	rm -f debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME).1
	# Icons
	dh_installdirs --package=$(DEBIAN_NAME) usr/share/pixmaps
	cp -a $(DEB_TAR_SRCDIR)/chrome/app/theme/chromium/product_logo_48.png debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).png
	for size in 22 24 32 48 64 128 256 ; do \
	  dh_installdirs --package=$(DEBIAN_NAME) usr/share/icons/hicolor/$${size}x$${size}/apps ; \
	  cp -a $(DEB_TAR_SRCDIR)/chrome/app/theme/chromium/product_logo_$$size.png  \
	    debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/$${size}x$${size}/apps/$(DEBIAN_NAME).png ; \
	done
	dh_installdirs --package=$(DEBIAN_NAME) usr/share/icons/hicolor/scalable/apps
	cp -a debian/chromium-browser.svg debian/chromium-browser/usr/share/icons/hicolor/scalable/apps
	
	chmod 4755 debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
	# NaCL may be blacklisted, so only include it when it's been built
ifeq (,$(filter disable_nacl=1,$(GYP_DEFINES)))
	cp -a debian/tmp/$(LIB_DIR)/libppGoogleNaClPluginChrome.so debian/chromium-browser/$(LIB_DIR)/
	cp -a debian/tmp/$(LIB_DIR)/nacl_irt_* debian/$(DEBIAN_NAME)/$(LIB_DIR)/
endif
	# Locales: only keep en-US in the main deb
	dh_installdirs --package=chromium-browser-l10n $(LIB_DIR)/locales
	cp $(SRC_DIR)/out/$(BUILD_TYPE)/locales/* debian/$(DEBIAN_NAME)-l10n/$(LIB_DIR)/locales
	mkdir debian/$(DEBIAN_NAME)/$(LIB_DIR)/locales
	mv debian/$(DEBIAN_NAME)-l10n/$(LIB_DIR)/locales/en-US.pak debian/$(DEBIAN_NAME)/$(LIB_DIR)/locales
	
	dh_installdirs --package=chromium-codecs-ffmpeg $(LIB_DIR)
	cp debian/tmp-std/libffmpegsumo.so debian/chromium-codecs-ffmpeg/$(LIB_DIR)
	
	dh_installdirs --package=chromium-codecs-ffmpeg-extra $(LIB_DIR)
	cp debian/tmp-extra/libffmpegsumo.so debian/chromium-codecs-ffmpeg-extra/$(LIB_DIR)
	
	dh_strip --package=$(DEBIAN_NAME) --dbg-package=$(DEBIAN_NAME)-dbg
	dh_strip --package=chromium-codecs-ffmpeg --dbg-package=chromium-codecs-ffmpeg-dbg
	dh_strip --package=chromium-codecs-ffmpeg-extra --dbg-package=chromium-codecs-ffmpeg-extra-dbg

# Compare
PKG_DIRS = $(addprefix debian/,$(shell grep ^Package debian/control | cut -d' ' -f2))

binary-predeb/$(DEBIAN_NAME):
ifneq (,$(findstring Ubuntu,$(DEBIAN_DIST)))
	# we need space on the CD, so remove duplicates of the doc files
	# (See LP: #194574 as for why we don't let cdbs do it)
	@for doc in copyright AUTHORS changelog.Debian.gz ; do \
	  F=debian/$(DEBIAN_NAME)/usr/share/doc/$(DEBIAN_NAME)/$$doc ; \
	  for file in `find $(addsuffix /usr/share/doc,$(filter-out debian/$(DEBIAN_NAME),$(PKG_DIRS))) -type f -name $$doc -print`; do \
	    cmp -s $$file $$F ; \
	    if [ $$? -eq 0 ] ; then \
	      rm -f $$file ; \
	      echo "  symlinking $$doc in '"`echo $$file | awk 'BEGIN{ FS="/"} { print $$2 }'`"' to file in '$(DEBIAN_NAME)'" ; \
	      ( cd `dirname $$file` ; ln -s ../$(DEBIAN_NAME)/$$doc ) ; \
	    fi ; \
	  done ; \
	done
endif

###############################################################################################

# Tarball (get-packaged-orig-source)
GCLIENT_URL  := http://src.chromium.org/svn/trunk/tools/depot_tools
#CHROMIUM_URL := http://src.chromium.org/svn/trunk/src
CHROMIUM_RLZ := https://src.chromium.org/chrome/releases

STRIP_TARBALL ?= 1

STRIPPED_DIRS_FROM_CO := \
	src/chrome/tools/test/reference_build \
	src/chrome/tools/test/reference_build/chrome_linux \
	src/webkit/data/layout_tests/LayoutTests \
	src/third_party/WebKit/LayoutTests \
	src/third_party/ffmpeg/binaries/chromium/linux/ia32 \
	src/third_party/ffmpeg/binaries/chromium/linux/ia32_dbg \
	src/third_party/ffmpeg/binaries/chromium/linux/x64 \
	src/third_party/ffmpeg/binaries/chromium/linux/x64_dbg \
	src/third_party/flac \
	src/third_party/gold \
	src/third_party/speex \
	build/third_party/cbuildbot_chromite \
	commit-queue \
	$(NULL)

# stuff we don't have access to and shouldn't be in DEPS
STRIPPED_DIRS_FROM_CO += \
	src/chrome/app/theme/google_chrome \
	src/chrome/installer/linux \
	$(NULL)

# prefix with _ those that we can't remove (just yet) because of the gclient
# hooks (see build/all.gyp) or of some unneeded deps/includes
STRIPPED_DIRS := \
	chrome/test/data/safe_browsing/old \
	chrome/test/data/firefox2_nss_mac \
	chrome/third_party/wtl/ \
	gears \
	google_update \
	o3d \
	third_party/boost \
	third_party/bsdiff \
	third_party/bspatch \
	third_party/ffmpeg/binaries \
	third_party/fuzzymatch \
	third_party/gles_book_examples \
	third_party/gold \
	third_party/hunspell/dictionaries \
#	third_party/icu/mac \
	third_party/lcov \
	third_party/lighttpd \
	third_party/nspr \
	third_party/nss \
	third_party/ocmock \
	third_party/pthread \
	third_party/pyftpdlib \
	third_party/simplejson \
	third_party/scons \
	_third_party/tcmalloc \
	tools/symsrc \
	tools/site_compare \
	tools/stats_viewer \
	tools/valgrind \
	tools/wine_valgrind \
	v8/test/cctest \
	webkit/data/layout_tests \
	$(NULL)

# There are directories we want to strip, but that are unnecessarily required by the build-system
# So we drop everything but the gyp/gypi files and README.chromium (to see what that dir contained)
ALMOST_STRIPPED_DIRS := \
	courgette \
	third_party/gles2_book \
	third_party/openssl \
	$(NULL)

ifeq (1,$(WANT_SYSTEM_LIBS))
# Directories that will be dropped if the corresponding system lib are enabled in GYP_DEFINES
# We need to keep some files (like *.gyp) so we can't use STRIPPED_DIRS
# We can't drop third_party/zlib because we don't have contrib/minizip/*zip.h, and
# third_party/sqlite because it's a conditional build (see USE_SYSTEM_SQLITE)
STRIPPED_SYSTEM_LIB_DIRS += \
	third_party/bzip2 \
	third_party/flac \
	third_party/harfbuzz-ng \
	third_party/icu \
	third_party/libevent \
	third_party/libjpeg \
	third_party/libpng \
	third_party/libusb \
	third_party/libvpx \
	third_party/libxslt \
	third_party/protobuf \
	third_party/speex \
	third_party/sqlite \
	third_party/xdg-utils \
	third_party/yasm \
	third_party/zlib \
	$(NULL)
endif

STRIP_SYSTEM_DIRS = \
	($(foreach DIR,$(1),$(if $(findstring use_system_$(notdir $(DIR))=1,$(GYP_DEFINES)),\
	  (cd $(2)/$(dir $(DIR)) && \
	  find $(notdir $(DIR)) -depth -mindepth 1 \! \( -name \*.gyp -o -name \*.gypi -o -name README.chromium -o -name \*.patch \) -print -delete );)))

ALMOST_STRIP_DIRS = \
	($(foreach DIR,$(1),(cd $(2)/$(dir $(DIR)) && \
	  find $(notdir $(DIR)) -depth -mindepth 1 \! \( -name \*.gyp -o -name \*.gypi -o -name README.chromium \) -print -delete );))

TMP_DDIR     := $(DEBIAN_NAME)-$(shell echo $$$$)
ifeq (,$(LOCAL_BRANCH))
TMP_DIR      := $(TMP_DDIR)
else
TMP_DIR      := $(LOCAL_BRANCH)
endif

get-orig-source:
	$(warning $@ is deprecated. Use changelog to set version, and either param/rule "get-packaged-orig-source" or a recent "bzr builddeb".)

get-packaged-orig-source: ORIG_VERSION = $(shell wget -qO- "https://omahaproxy.appspot.com/all?os=linux&channel=dev" | grep linux | while IFS=, read col1 col2 col3 col4; do echo $$col3; done)
#get-packaged-orig-source: UPSTREAM_REV_NUMBER = $(shell wget -q -O - http://omahaproxy.appspot.com/revision.json?version=$(ORIG_VERSION) |python -c 'import json, sys; print json.loads(sys.stdin.read())["chromium_revision"]')
get-packaged-orig-source: gos-co gos-pack

gos-co: CHROMIUM_URL = $(CHROMIUM_RLZ)/$(ORIG_VERSION)
gos-co: GCLIENT_UPDATE_FLAGS = --nohooks --delete_unversioned_trees
gos-co:
ifeq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DIR)
endif
	@if [ ! -d $(TMP_DIR) ] ; then echo mkdir $(TMP_DIR); mkdir $(TMP_DIR) ; fi
	@set -x; if [ ! -d $(TMP_DIR)/tools/depot_tools ] ; then \
	  svn co --quiet $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	else \
	  svn update $(TMP_DIR)/tools/depot_tools ; \
	fi; set +x
	rm -f $(TMP_DIR)/.gclient
	cd $(TMP_DIR) && ./tools/depot_tools/gclient config $(CHROMIUM_URL)
ifeq (1,$(STRIP_TARBALL))
ifneq (,$(STRIPPED_DIRS_FROM_CO))
	# Add exclusions in .gclient for $(STRIPPED_DIRS_FROM_CO)
	@for excl in $(STRIPPED_DIRS_FROM_CO) ; do \
	  perl -i -pe 's,("custom_deps"\s*:\s*{),$$1\n      "'$$excl'": None\,,' $(TMP_DIR)/.gclient ; \
	done
	grep -Ev '^($$|[[:blank:]]*#)' $(TMP_DIR)/.gclient
endif
endif
	
	# Checkout (drop the previous content and retry if gclient failed, see http://crbug.com/39954)
	cd $(TMP_DIR) && ./tools/depot_tools/gclient update $(GCLIENT_UPDATE_FLAGS) || \
	  ( rm -rf $(foreach dir,src [0-9]*,$(wildcard $(TMP_DIR)/$(dir))) ; \
	   ./tools/depot_tools/gclient update $(GCLIENT_UPDATE_FLAGS) )
	
	# For NaCL, run the hooks, but not the gyp ones. All one "&&"-chained
	# statement so that a failure will stop the program and be noticed.
	cd $(TMP_DIR) && SDIR=$$(grep '"name"' .gclient |cut -d\" -f4) && perl -i~ -pe 's%\[((.)python\2, (.)(?:src/build/gyp_chromium|src/build/download_nacl_toolchains.py)\3)%[\2echo\2, \2#disabled#\2, \1%' $$SDIR/DEPS && perl -i~ -pe 's%(\bsys\.executable)\b$$%(\1 or "/usr/bin/python")%' tools/depot_tools/gclient.py && ./tools/depot_tools/gclient runhooks && mv $$SDIR/DEPS~ $$SDIR/DEPS && mv tools/depot_tools/gclient.py~ tools/depot_tools/gclient.py
	
ifneq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DDIR)
	cp -la $(TMP_DIR) $(TMP_DDIR)
endif
	
ifeq (1,$(STRIP_TARBALL))
	# Strip tarball from some big directories not needed on the linux platform
	cd $(TMP_DDIR)/src && rm -rfv $(STRIPPED_DIRS) | grep -vE '/\.svn(/|.$$)' > ../REMOVED-stripped.txt
ifneq (,$(ALMOST_STRIPPED_DIRS))
	# Strip listed dirs almost completely (keep *.gyp and README.chromium)
	$(call ALMOST_STRIP_DIRS,$(ALMOST_STRIPPED_DIRS),$(TMP_DDIR)/src) | grep -vE '/\.svn(/|.$$)' >> $(TMP_DDIR)/REMOVED-stripped.txt
endif
ifneq (,$(STRIPPED_SYSTEM_LIB_DIRS))
	$(call STRIP_SYSTEM_DIRS,$(STRIPPED_SYSTEM_LIB_DIRS),$(TMP_DDIR)/src) | grep -vE '/\.svn(/|.$$)' >> $(TMP_DDIR)/REMOVED-stripped.txt
endif
	# Remove binaries
	cd $(TMP_DDIR)/src && find . -type f \( -iname \*.exe -o -iname \*.dll -o -iname \*.pdb -o -name \*.o -o -name \*.a -o -name \*.dylib -o -name \*.so -o -name \*.so.\* \) -print -delete > ../REMOVED-bin_only.txt
	
	# Remove cache files and backups
	cd $(TMP_DDIR)/src && find . -type f \( -iname \*.bak -o -iname \*.orig -o -iname \*.cache -o -name \*.pyc -o -name \*.pyo \) -print -delete > ../REMOVED-ephemera.txt
	cd $(TMP_DDIR)/src && find . -type d -name autom4te.cache -print -delete >> ../REMOVED-ephemera.txt
	
	find $(TMP_DDIR) -regex '.*/\([^/]*\)/\1[^/]*\.\(Makefile\|\(target\|host\)\.mk\)' -print -delete >> $(TMP_DDIR)/REMOVED-gyp.txt
	
	wc -l $(TMP_DDIR)/REMOVED-*.txt
endif

gos-pack: TMP_DIR  = $(TMP_DDIR)
gos-pack: REVISION = $(shell cd $(TMP_DIR)/src && svn info | grep ^Revision: | cut -d' ' -f2)
gos-pack: DISCOVERED_SRC_VERSION  = $(shell cut -d= -f2 $(TMP_DIR)/src/chrome/VERSION | sed -e 's,$$,.,' | tr -d '\n' | sed -e 's/.$$//')
gos-pack:
	test "$(ORIG_VERSION)"="$(DISCOVERED_SRC_VERSION)"
	
	# Pack
	if [ src != $(DEB_TAR_SRCDIR) ] ; then mv $(TMP_DIR)/src $(TMP_DIR)/$(DEB_TAR_SRCDIR) ; fi
	( cd $(TMP_DIR) ; echo "This file is here solely to keep the directory structure when extracting." > PLACEHOLDER ; tar --exclude-vcs --hard-dereference -Jcf ../../$(DEBIAN_NAME)_$(ORIG_VERSION).orig.tar.xz $(DEB_TAR_SRCDIR) PLACEHOLDER )
	
	# Remove existing files do a clean re-extract
	rm -rf $(DEB_TAR_SRCDIR) $(TMP_DIR) .pc && tar -Jxf ../$(DEBIAN_NAME)_$(ORIG_VERSION).orig.tar.xz
	dch -v $(ORIG_VERSION)-0ubuntuppa1~raring1 "New upstream version $(ORIG_VERSION)"
	@echo "# Done (created $(DEBIAN_NAME)_$(ORIG_VERSION).orig.tar.xz)"
	@echo "Be sure to edit debian/changelog as necessary"

