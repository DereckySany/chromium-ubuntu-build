#!/usr/bin/make -f

DEBIAN_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
DEBIAN_VERSION		:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
DEBIAN_UPSTREAM_VERSION	:= $(shell echo $(DEBIAN_VERSION) | sed 's/^\(.*\)-[^-]*$$/\1/')
DEBIAN_REVISION		:= $(shell echo $(DEBIAN_VERSION) | sed 's/^.*r\([^-]*\)-.*/\1/')
DEBIAN_DIST		:= $(shell lsb_release -ds | tr -d '()' | sed -e 's/\#/ /g')
DEBIAN_DIST_NAME	:= $(shell lsb_release -si | sed -e 's/\#/ /g')
DEBIAN_DIST_VERSION	:= $(shell lsb_release -sr | sed -e 's/\#/ /g')

DEBIAN_CODECS_NAME      := $(subst browser,codecs-ffmpeg,$(DEBIAN_NAME))
DEBIAN_DRIVER_NAME      := $(subst browser,chromedriver,$(DEBIAN_NAME))

DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
DEB_HOST_ARCH_CPU ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU)
DEB_BUILD_ARCH ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_BUILD_ARCH_BITS ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH_BITS)

# DEB_TAR_SRCDIR has to be 'src' as this is what gyp expects :(
DEB_TAR_SRCDIR := src
SRC_DIR        := $(CURDIR)/$(DEB_TAR_SRCDIR)
LIB_DIR        := usr/lib/$(DEBIAN_NAME)
DEB_BUILDDIR   := $(SRC_DIR)
FFMPEG_DIR     := third_party/ffmpeg
FFMPEG_SRC_DIR := $(SRC_DIR)/$(FFMPEG_DIR)
NINJA          := ninja

# Whitelist LP provided new langs only in release builds, PPAs ship them all
WANT_ONLY_WHITELISTED_NEW_LANGS ?= 0

ifneq (,$(findstring Ubuntu,$(DEBIAN_DIST)))
DISTRIBUTION=UBUNTU
UBUNTU_DIST=$(DEBIAN_DIST)
endif

ifneq (,$(findstring Debian,$(DEBIAN_DIST)))
DISTRIBUTION=DEBIAN
endif

WANT_DEBUG       := 0

# System libs off. Rationalle: We usually want to use as many system libraries
# as possible, as a security measure. If there's a security problem in one, the
# security team can replace it in the distro and everything magically starts
# working. Chromium is an exception. It moves quickly emough that testing that
# system libraries actually work is too hard, and upstream does a pretty good
# job of fixing known security problems soon.  As long as we keep the package
# fresh, no system libs is the smarter move.
WANT_SYSTEM_LIBS ?= 0
WANT_SHARED_LIBS ?= 0
VERBOSE          := 1
PROCESSORS       ?= $(shell grep -ic ^processor /proc/cpuinfo)
ifeq (0,$(PROCESSORS))
PROCESSORS := 1
endif

# Disable SSE2 and enable sandbox
GYP_DEFINES += disable_sse2=1

# Build the launchpad translations (already landed upstream)
GYP_DEFINES += use_third_party_translations=1

# Always add debug symbols, and strip them when we don't want them.
#GYP_DEFINES += release_extra_cflags="-g"

# Don't fail on compilation warnings
GYP_DEFINES += werror=$(NULL)

# We are never using a sysroot-based toolchain; override the wrong
# autodetection for arm.
GYP_DEFINES += sysroot=

# Disable NaCl until we figure out what to do with the private toolchain
GYP_DEFINES += disable_nacl=1

# do not use third_party/gold as the linker.
GYP_DEFINES += linux_use_gold_binary=0 linux_use_gold_flags=0

# enable features that we want.
GYP_DEFINES += enable_webrtc=1

# elimiate DCHECK and DLOG function calls, to save ~9MB off binary
#GYP_DEFINES += logging_like_official_build=1

# Intentional configuration, not bug work-arounds.
ifeq (arm,$(DEB_HOST_ARCH_CPU))

GYP_DEFINES += \
	arm_neon=0 \
	target_arch=arm \
	use_cups=1 \
	$(NULL)

 ifeq (armel,$(DEB_HOST_ARCH))
GYP_DEFINES += \
	v8_use_arm_eabi_hardfloat=false \
	arm_float_abi=soft \
	arm_thumb=0 \
	armv7=0 \
	$(NULL)
 endif
 ifeq (armhf,$(DEB_HOST_ARCH))
GYP_PARAMS += -DUSE_EABI_HARDFLOAT 
# ARN Neon optional flag is off because it causes build errors, AND testing
# /proc/cpuinfo contents can't work with a sandbox anyway.
GYP_DEFINES += \
	arm_neon_optional=0 \
	v8_use_arm_eabi_hardfloat=true \
	arm_fpu=vfpv3-d16 \
	arm_float_abi=hard \
	arm_thumb=1 \
	armv7=1 \
	$(NULL)
 endif
endif
ifeq (amd64,$(DEB_HOST_ARCH))
GYP_DEFINES += target_arch=x64
endif
ifeq (i386,$(DEB_HOST_ARCH))
GYP_DEFINES += target_arch=ia32
endif

# Do this for every architecture. More than 4GB of memory is too much to expect
# of builders.
COMPONENT_SHARED_LIB_BUILD := 1

ifeq (1,$(COMPONENT_SHARED_LIB_BUILD))
GYP_DEFINES += component=shared_library

# SEGV on component builds, 2013-05
GYP_DEFINES += linux_use_tcmalloc=0
endif

# Webkit library is enormous. Exclude for now.
GYP_DEFINES += remove_webcore_debug_symbols=1

# Don't let dh_installinit install *.default in /etc/default
DEB_DH_INSTALLINIT_ARGS += --noscripts --onlyscripts

ifeq (1,$(WANT_DEBUG))
BUILD_TYPE := Debug
else
BUILD_TYPE := Release
# Add symbols
GYP_DEFINES += linux_dump_symbols=1
endif
BUILD_ARGS += -C src/out/$(BUILD_TYPE)

# Verbose?
ifeq (1,$(VERBOSE))
#BUILD_ARGS += V=1
BUILD_ARGS += -v
GN_BUILD_ARGS += -v
endif

# Shared libraries
ifeq (1,$(WANT_SHARED_LIBS))
GYP_DEFINES += library=shared_library
endif

CC := gcc -fuse-ld=gold
CXX := g++ -fuse-ld=gold

subst_files = \
	debian/$(DEBIAN_NAME).sh \
	$(NULL)

ifneq (1,$(PROCESSORS))
#BUILD_ARGS += -j$(PROCESSORS)
endif

# Literal paths to remove
INSTALL_EXCLUDE_PATHS = \
	obj \
	obj.target \
	obj.host \
	.deps \
	calendar_app \
	docs_app \
	gmail_app \
	pyproto \
	pseudo_locales \
	DumpRenderTree_resources \
	lib.target \
	locales \
	resources \
	chrome-wrapper \
	product_logo_48.png \
	libnpapi_layout_test_plugin.so \
	libnpapi_test_plugin.so \
	mksnapshot \
	ncdecode_table \
	ncdecode_tablegen \
	ssl_false_start_blacklist_process \
	protoc \
	gfx_unittests \
	linker.lock \
	genmacro \
	genmodule \
	genperf \
	genstring \
	genversion \
	re2c \
	yasm \
	libvpx_obj_int_extract \
	xdisplaycheck \
	libTestRunner.so \
	chromedriver \
	*.stamp \
	AHEM____.TTF \
	fonts.conf \
	libTestNetscapePlugIn.so \
	plugins/libTestNetscapePlugIn.so \
	ImageDiff \
	$(NULL)

# FFmpeg-mt
# Don't build it as part of chromium. Build it separately twice, once with
# the Chrome branding to gain the extra codecs, and once without branding.
# The ffmpeg_branding variable controls which codecs are built inside the sumo lib.
# By default, ffmpeg_branding equals to "Chromium" and only builds the ogg/vorbis/theora codecs.
# When set to "Chrome", it also builds aac/ac3/mpeg4audio/h264/mov/mp3
BROWSER_GYP_DEFINES += \
	proprietary_codecs=1 \
	build_ffmpegsumo=0 \
	$(NULL)
FFMPEG_MT_GYP_DEFINES = \
	use_system_vpx=0 \
	release_extra_cflags=-g \
	$(NULL)
FFMPEG_MT_STD_GYP_DEFINES   = $(NULL)
FFMPEG_MT_EXTRA_GYP_DEFINES = ffmpeg_branding=Chrome

# Precise and earlier don't set some settings.
ifeq (,$(filter 12.04%,$(UBUNTU_DIST)))
# enable compile-time dependency on gnome-keyring
GYP_DEFINES += use_gnome_keyring=1 linux_link_gnome_keyring=1
# controlling the use of GConf (the classic GNOME configuration
# and GIO, which contains GSettings (the new GNOME config system)
GYP_DEFINES += use_gconf=1 use_gio=1
endif

# undefined reference to 'chromium_sqlite3_initialize_unix_sqlite3_file'
USE_SYSTEM_SQLITE := 0

# Recursive third-party/opus/opus.h self-#inclusion.  Disabled for now.
USE_SYSTEM_OPUS = 0
# 'WebPPictureImportBGRX' was not declared
USE_SYSTEM_WEBP = 0
# minizip/unzip.h: No such file or directory
USE_SYSTEM_MINIZIP = 0
USE_SYSTEM_LIBSRTP = 0
USE_SYSTEM_HARFBUZZ = $(shell (dpkg --get-selections | grep -q libharfbuzz-dev && echo 1 || echo 0))
# Missing function reference
USE_SYSTEM_LIBVPX = 0

# System libs
ifeq (1,$(WANT_SYSTEM_LIBS))
GYP_DEFINES += \
	use_system_bzip2=1 \
	use_system_libsrtp=$(USE_SYSTEM_LIBSRTP) \
	use_system_protobuf=1 \
	use_system_xdg_utils=1 \
	use_system_yasm=1 \
	$(NULL)

SYSTEM_LIBS = \
	-Duse_system_expat=1 \
	-Duse_system_ffmpeg=0 \
	-Duse_system_flac=1 \
	-Duse_system_harfbuzz=$(USE_SYSTEM_HARFBUZZ) \
	-Duse_system_icu=1 \
	-Duse_system_jsoncpp=0 \
	-Duse_system_libevent=1 \
	-Duse_system_libjpeg=1 \
	-Duse_system_libpng=0 \
	-Duse_system_libusb=1 \
	-Duse_system_libvpx=$(USE_SYSTEM_LIBVPX) \
	-Duse_system_libwebp=$(USE_SYSTEM_WEBP) \
	-Duse_system_libxml=1 \
	-Duse_system_libxslt=1 \
	-Duse_system_minizip=$(USE_SYSTEM_MINIZIP) \
	-Duse_system_opus=$(USE_SYSTEM_OPUS) \
	-Duse_system_re2=0 \
	-Duse_system_snappy=1 \
	-Duse_system_speex=1 \
	-Duse_system_sqlite=0 \
	-Duse_system_v8=1 \
	-Duse_system_zlib=0 \
	$(NULL)
endif

# Build chrome and chrome_sandbox, and chromedriver
BUILD_TARGETS += \
	chrome \
	chrome_sandbox \
	chromedriver \
	$(NULL)

GYP_DEFINES += \
	linux_sandbox_chrome_path=/$(LIB_DIR)/$(DEBIAN_NAME) \
	$(NULL)

# Needed to preserve the suid and make the sandbox happy
DEB_FIXPERMS_EXCLUDE := chrome-sandbox

ifneq (,$(GOOGLEAPI_APIKEY_$(DISTRIBUTION)))
GYP_PARAMS += \
	-Dgoogle_api_key='$(GOOGLEAPI_APIKEY_$(DISTRIBUTION))' \
	-Dgoogle_default_client_id='$(GOOGLEAPI_CLIENTID_$(DISTRIBUTION))' \
	-Dgoogle_default_client_secret='$(GOOGLEAPI_CLIENTSECRET_$(DISTRIBUTION))'
else
$(warning Google API info is not set in build variables GOOGLEAPI_APIKEY_$(DISTRIBUTION) GOOGLEAPI_CLIENTID_$(DISTRIBUTION) GOOGLEAPI_CLIENTSECRET_$(DISTRIBUTION))
endif

ifneq ($(DEB_HOST_ARCH),$(DEB_BUILD_ARCH))
$(note Cross compiling for $(DEB_HOST_ARCH), from this $(DEB_BUILD_ARCH))
CROSS_BUILD = PKG_CONFIG_PATH=/usr/lib/$(DEB_HOST_MULTIARCH)/pkgconfig:/usr/$(DEB_HOST_MULTIARCH)/lib/pkgconfig CXX=$(DEB_HOST_GNU_TYPE)-$(CXX)
DEB_MAKE_ENVVARS += CXX=$(DEB_HOST_GNU_TYPE)-$(CXX)
else
CROSS_BUILD = 
endif
#BUILD_ARGS += CC_host="$(CC)" CXX_host="$(CXX)"
COMPILER = CC="$(CC)" CXX="$(CXX)"

clean:
	rm -rf debian/*-stamp debian/stamp-* debian/tmp-*
	rm -f build configure-stamp build-stamp \
		build-stamp-ffmpeg-std build-stamp-ffmpeg-extra \
		configure-stamp-ffmpeg-std configure-stamp-ffmpeg-extra \
		configure-stamp-gn build-stamp-gn
	rm -f $(subst_files)
	rm -rf $(DEB_TAR_SRCDIR)/out $(FFMPEG_SRC_DIR)/yasm $(FFMPEG_SRC_DIR)/out $(FFMPEG_SRC_DIR)/*.mk $(DEB_TAR_SRCDIR)/tools/gn/bin/linux/gn
	find $(DEB_TAR_SRCDIR) \( -name \*.pyc -o -name \*.pyo -name \*.o \) -delete
	find $(DEB_TAR_SRCDIR) -regex '.*/\([^/]*\)/\1[^/]*\.\(Makefile\|\(target\|host\)\.mk\)' -delete
	sed -i 's,/etc/$(DEBIAN_NAME)/policies,/etc/chromium/policies,' \
		$(DEB_TAR_SRCDIR)/chrome/common/chrome_paths.cc
	
	dh_clean

tests: build-stamp
tests:
	#

configure-stamp-gn: GYP_ENV = GYP_GENERATORS=ninja
configure-stamp-gn: GYP_ENV += GYP_DEFINES="werror= linux_use_gold_binary=0 linux_use_gold_flags=0"
configure-stamp-gn:
	if [ ! -d src ]; then \
		mv $(DEBIAN_NAME)-$(DEBIAN_UPSTREAM_VERSION)/src .; \
		rm -r $(DEBIAN_NAME)-$(DEBIAN_UPSTREAM_VERSION); \
	fi
	
	patch -p 1 -i debian/patches/disable_gn.patch
	
	cd $(SRC_DIR) && $(GYP_ENV) $(CROSS_BUILD) python build/gyp_chromium tools/gn/gn.gyp $(GYP_PARAMS)
	
	patch -p 1 -R -i debian/patches/disable_gn.patch
	touch $@

build-stamp-gn: configure-stamp-gn
	$(COMPILER) $(NINJA) -C src/out/Release $(GN_BUILD_ARGS) gn
	cp src/out/Release/gn src/tools/gn/bin/linux
	rm -rf src/out
	touch $@

configure: configure-stamp
configure-stamp: build-stamp-gn
configure-stamp: GYP_ENV = GYP_GENERATORS=ninja
configure-stamp: GYP_ENV += GYP_DEFINES="$(GYP_DEFINES) $(BROWSER_GYP_DEFINES)"
configure-stamp:
	dh_testdir
	
	if [ ! -d src ]; then \
		mv $(DEBIAN_NAME)-$(DEBIAN_UPSTREAM_VERSION)/src .; \
		rm -r $(DEBIAN_NAME)-$(DEBIAN_UPSTREAM_VERSION); \
	fi
	
	sed -e 's/@BUILD_DIST@/$(DEBIAN_DIST_NAME) $(DEBIAN_DIST_VERSION)/g' \
	    -e 's/@BUILD_DIST_NAME@/$(DEBIAN_DIST_NAME)/g' \
	    -e 's/@BUILD_DIST_VERSION@/$(DEBIAN_DIST_VERSION)/g' \
	    debian/chromium-browser.sh.in > debian/chromium-browser.sh
	
	sed -i 's,/etc/chromium/policies,/etc/$(DEBIAN_NAME)/policies,' \
		$(DEB_TAR_SRCDIR)/chrome/common/chrome_paths.cc
	
ifeq (1,$(WANT_SYSTEM_LIBS))
	cd $(SRC_DIR) && python build/linux/unbundle/replace_gyp_files.py $(SYSTEM_LIBS)
endif
	cd $(SRC_DIR) && $(GYP_ENV) $(CROSS_BUILD) python build/gyp_chromium build/all.gyp $(GYP_PARAMS)
	touch $@

build: build-stamp tests build-stamp-ffmpeg-std build-stamp-ffmpeg-extra
	touch $@

build-stamp: configure-stamp
	#$(MAKE) -C $(SRC_DIR) $(BUILD_ARGS) $(BUILD_TARGETS)
	$(COMPILER) $(NINJA) $(BUILD_ARGS) $(BUILD_TARGETS)
	touch $@

binary-indep: build install
	dh_testdir
	dh_testroot
	dh_install
	dh_compress
	dh_fixperms --exclude $(DEB_FIXPERMS_EXCLUDE)
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb -- -Zxz

binary-arch: build install
	dh_testdir
	dh_testroot
	dh_install
	dh_installmenu
	dh_compress
	dh_fixperms --exclude $(DEB_FIXPERMS_EXCLUDE)
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb -- -Zxz

binary: binary-indep binary-arch

configure-stamp-ffmpeg-%: build-stamp-gn
	cd $(SRC_DIR) && GYP_DEFINES="$(GYP_DEFINES)" $(CROSS_BUILD) GYP_GENERATORS=ninja build/gyp_chromium --depth=../src $(FFMPEG_DIR)/ffmpeg.gyp $(GYP_PARAMS)
	touch $@

build-stamp-ffmpeg-%: GYP_DEFINES += $(FFMPEG_MT_$(subst std,STD,$(subst extra,EXTRA,$*))_GYP_DEFINES) $(FFMPEG_MT_GYP_DEFINES)
build-stamp-ffmpeg-%: configure-stamp-ffmpeg-%
	#cd $(FFMPEG_SRC_DIR) ; $(MAKE) -f ffmpeg.Makefile $(BUILD_ARGS) $(CROSS_BUILD)
	$(NINJA) $(BUILD_ARGS) $(CROSS_BUILD)
	mkdir debian/tmp-$*
	cp $(SRC_DIR)/out/$(BUILD_TYPE)/libffmpegsumo.so $(CURDIR)/debian/tmp-$*
	touch $@

install: build
	dh_testdir
	dh_testroot
	dh_prep
	
	dh_installdirs --package=$(DEBIAN_NAME) $(LIB_DIR)
	cp -r $(SRC_DIR)/out/$(BUILD_TYPE)/* debian/$(DEBIAN_NAME)/$(LIB_DIR)
ifeq (1,$(COMPONENT_SHARED_LIB_BUILD))
	mkdir -p debian/$(DEBIAN_NAME)/$(LIB_DIR)/libs
	cp -r $(SRC_DIR)/out/$(BUILD_TYPE)/lib/*.so debian/$(DEBIAN_NAME)/$(LIB_DIR)/libs
endif
	cd debian/$(DEBIAN_NAME)/$(LIB_DIR) && rm -rfv $(INSTALL_EXCLUDE_PATHS)
ifeq (1,$(COMPONENT_SHARED_LIB_BUILD))
	# Set the directory for looking up component libraries.
	find debian/$(DEBIAN_NAME)/$(LIB_DIR)/libs             -type f -name \*.so             -execdir chrpath --replace "\$$ORIGIN" {} \;
	find debian/$(DEBIAN_NAME)/$(LIB_DIR)      -maxdepth 1 -type f -name \*.so             -execdir chrpath --replace "\$$ORIGIN/libs" {} \;
endif
	find debian/$(DEBIAN_NAME)/$(LIB_DIR)      -maxdepth 1 -type f             -executable -execdir chrpath --replace "\$$ORIGIN/libs" {} \;
	# Launcher script
	dh_installdirs --package=$(DEBIAN_NAME) usr/bin
	cp -a debian/$(DEBIAN_NAME).sh debian/$(DEBIAN_NAME)/usr/bin/$(DEBIAN_NAME)
	chmod 755 debian/$(DEBIAN_NAME)/usr/bin/$(DEBIAN_NAME)
	# Preferences
	dh_installdirs --package=$(DEBIAN_NAME) etc/$(DEBIAN_NAME)
	cp -a debian/$(DEBIAN_NAME).default debian/$(DEBIAN_NAME)/etc/$(DEBIAN_NAME)/default
	
	# Rename the binary from chrome to $(DEBIAN_NAME), this is required
	# as chromium dereferences all symlinks before starting its children
	# making the Gnome System Monitor confused with icons
	mv debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)
	
	# Manpage is for wrong program name, and it's in a weird place.  Use and destroy.
	mv debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome.1 debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME).1
	dh_installman --package=$(DEBIAN_NAME) debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME).1
	rm -f debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME).1
	
	# Icons
	dh_installdirs --package=$(DEBIAN_NAME) usr/share/pixmaps
	cp -a $(DEB_TAR_SRCDIR)/chrome/app/theme/chromium/product_logo_48.png debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).png
	for size in 22 24 32 48 64 128 256 ; do \
	  dh_installdirs --package=$(DEBIAN_NAME) usr/share/icons/hicolor/$${size}x$${size}/apps ; \
	  cp -a $(DEB_TAR_SRCDIR)/chrome/app/theme/chromium/product_logo_$$size.png  \
	    debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/$${size}x$${size}/apps/$(DEBIAN_NAME).png ; \
	done
	dh_installdirs --package=$(DEBIAN_NAME) usr/share/icons/hicolor/scalable/apps
	cp -a debian/chromium-browser.svg debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/scalable/apps
	
	# "you have to change the underscore from the build target into a hyphen".
	# https://code.google.com/p/chromium/wiki/LinuxSUIDSandbox
	mv debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome_sandbox debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome-sandbox
	chmod 4755 debian/$(DEBIAN_NAME)/$(LIB_DIR)/chrome-sandbox
	
	# NaCL may be blacklisted, so only include it when it's been built
ifeq (,$(filter disable_nacl=1,$(GYP_DEFINES)))
	cp -a $(SRC_DIR)/out/$(BUILD_TYPE)/libppGoogleNaClPluginChrome.so debian/$(DEBIAN_NAME)/$(LIB_DIR)/
	cp -a $(SRC_DIR)/out/$(BUILD_TYPE)/nacl_irt_* debian/$(DEBIAN_NAME)/$(LIB_DIR)/
endif
	# Locales: only keep en-US in the main deb
	dh_installdirs --package=chromium-browser-l10n $(LIB_DIR)/locales
	cp $(SRC_DIR)/out/$(BUILD_TYPE)/locales/* debian/$(DEBIAN_NAME)-l10n/$(LIB_DIR)/locales
	mkdir debian/$(DEBIAN_NAME)/$(LIB_DIR)/locales
	mv debian/$(DEBIAN_NAME)-l10n/$(LIB_DIR)/locales/en-US.pak debian/$(DEBIAN_NAME)/$(LIB_DIR)/locales
	# chromedriver
	dh_installdirs --package=$(DEBIAN_DRIVER_NAME) $(LIB_DIR)
	cp -a $(SRC_DIR)/out/$(BUILD_TYPE)/chromedriver debian/$(DEBIAN_DRIVER_NAME)/$(LIB_DIR)
	
	dh_installdirs --package=chromium-codecs-ffmpeg $(LIB_DIR)
	cp debian/tmp-std/libffmpegsumo.so debian/chromium-codecs-ffmpeg/$(LIB_DIR)
	
	dh_installdirs --package=chromium-codecs-ffmpeg-extra $(LIB_DIR)
	cp debian/tmp-extra/libffmpegsumo.so debian/chromium-codecs-ffmpeg-extra/$(LIB_DIR)
	
	dh_strip --package=$(DEBIAN_NAME) --dbg-package=$(DEBIAN_NAME)-dbg
	dh_strip --package=chromium-codecs-ffmpeg --dbg-package=chromium-codecs-ffmpeg-dbg
	dh_strip --package=chromium-codecs-ffmpeg-extra --dbg-package=chromium-codecs-ffmpeg-extra-dbg
	dh_strip --package=$(DEBIAN_DRIVER_NAME) --dbg-package=$(DEBIAN_DRIVER_NAME)-dbg

# Compare
PKG_DIRS = $(addprefix debian/,$(shell dh_listpackages))

binary-predeb/$(DEBIAN_NAME):
ifneq (,$(findstring Ubuntu,$(DEBIAN_DIST)))
	# we need space on the CD, so remove duplicates of the doc files
	# (See LP: #194574 as for why we don't let cdbs do it)
	@for doc in copyright AUTHORS changelog.Debian.gz ; do \
	  F=debian/$(DEBIAN_NAME)/usr/share/doc/$(DEBIAN_NAME)/$$doc ; \
	  for file in `find $(addsuffix /usr/share/doc,$(filter-out debian/$(DEBIAN_NAME),$(PKG_DIRS))) -type f -name $$doc -print`; do \
	    cmp -s $$file $$F ; \
	    if [ $$? -eq 0 ] ; then \
	      rm -f $$file ; \
	      echo "  symlinking $$doc in '"`echo $$file | awk 'BEGIN{ FS="/"} { print $$2 }'`"' to file in '$(DEBIAN_NAME)'" ; \
	      ( cd `dirname $$file` ; ln -s ../$(DEBIAN_NAME)/$$doc ) ; \
	    fi ; \
	  done ; \
	done
endif

###############################################################################################
# Translations

# New langs with enough coverage to land in official builds
# (leave empty to accept all new lang)
patch-translations: T := $(shell mktemp -d -t chromium-launchpad-translations-XXXXXXX)
patch-translations: GRIT_WHITELISTED_LANGS ?= ca@valencia eu gl ug 
patch-translations: TRANSLATIONS_TOOLS_BRANCH  := http://bazaar.launchpad.net/~chromium-team/chromium-browser/chromium-translations-tools.head
patch-translations: TRANSLATIONS_EXPORT_BRANCH := http://bazaar.launchpad.net/~chromium-team/chromium-browser/chromium-translations-exports.head
patch-translations: GRIT_TEMPLATES := chrome/app/chromium_strings.grd chrome/app/generated_resources.grd chrome/app/policy/policy_templates.grd ui/base/strings/ui_strings.grd webkit/glue/inspector_strings.grd webkit/glue/webkit_strings.grd
patch-translations: OTHER_GRIT_TEMPLATES := ui/base/strings/app_locale_settings.grd chrome/app/resources/locale_settings.grd chrome/app/resources/locale_settings_linux.grd 
patch-translations: MAPPED_GRIT_TEMPLATES := --map-template-names ui/base/strings/ui_strings.grd=ui/base/strings/app_strings.grd 
patch-translations: GRIT_CONVERTER_FLAGS := --create-patches translations-patches --import-gettext ../translations-export --export-grit $(T)/translations-grit --build-gyp-file build/common.gypi --other-grd-files $(shell echo $(OTHER_GRIT_TEMPLATES) | tr ' ' ',') $(MAPPED_GRIT_TEMPLATES) 
ifeq (1,$(WANT_ONLY_WHITELISTED_NEW_LANGS))
patch-translations: GRIT_CONVERTER_FLAGS += --whitelisted-new-langs $(shell echo $(GRIT_WHITELISTED_LANGS) | tr ' ' ',')
endif
patch-translations: PATCH_FILE := launchpad_translations.patch
patch-translations:
	test -d $(T)/translations-tools || bzr export $(T)/translations-tools $(TRANSLATIONS_TOOLS_BRANCH)
	test -d $(T)/translations-export || bzr export $(T)/translations-export $(TRANSLATIONS_EXPORT_BRANCH)
	cd src; $(T)/translations-tools/chromium2pot.py $(GRIT_CONVERTER_FLAGS) $(GRIT_TEMPLATES) 
	! test "$$(quilt diff)"  # if any changes outstanding, abort!
	-quilt delete "$(PATCH_FILE)"
	quilt new "$(PATCH_FILE)"
	set -eu; find $(T)/translations-grit -type f |sed -e 's,^$(T)/translations-grit/,,' |while read updatedfile; do quilt add -P "$(PATCH_FILE)" src/"$$updatedfile"; cp $(T)/translations-grit/"$$updatedfile" src/"$$updatedfile"; done;
	{ echo "Description: Contributed translations from Launchpad. "; echo; } |quilt header -r "$(PATCH_FILE)"
	quilt refresh -pab --no-timestamps "$(PATCH_FILE)"
	@echo "Patch needs committing."

###############################################################################################

# Tarball (get-packaged-orig-source)

get-packaged-orig-source: ORIG_VERSION = $(shell wget -qO- "https://omahaproxy.appspot.com/all?os=linux&channel=dev" | grep linux | while IFS=, read col1 col2 col3 col4; do echo $$col3; done)
get-packaged-orig-source: gos

gos: URL=https://commondatastorage.googleapis.com/chromium-browser-official/chromium-$(ORIG_VERSION).tar.xz
gos: DEST_FILENAME=$(DEBIAN_NAME)_$(ORIG_VERSION).orig.tar.xz
gos: CONTAINER_DIR=$(DEBIAN_NAME)-$(ORIG_VERSION)
gos:
	mkdir -p $(CONTAINER_DIR)/src
	wget --continue --progress=dot:mega --output-document=- $(URL) | (cd $(CONTAINER_DIR)/src && tar xJf - --strip-components=1)
	tar cJf $(DEST_FILENAME) $(CONTAINER_DIR)
	rm -r $(CONTAINER_DIR)
	@echo "# Done (created $(CURDIR)/$(DEST_FILENAME))"
	@echo "Be sure to edit debian/changelog as necessary"

